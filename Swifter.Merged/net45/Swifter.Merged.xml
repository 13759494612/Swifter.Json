<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Swifter.Merged</name>
  </assembly>
  <members>
    <member name="T:Swifter.Json.IJsonReader">
      <summary>
            JSON Reader.
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadGuid">
      <summary>
            读取 Guid 值。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadDateTimeOffset">
      <summary>
            读取 DateTimeOffset 值。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadString(System.Int32@)">
      <summary>
            读取 字符串 值。
            </summary>
      <param name="length">返回字符串长度</param>
      <returns>返回字符串第一个字符的引用</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.SkipValue">
      <summary>
            跳过一个 JSON 任意值。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonReader.SkipPropertyName">
      <summary>
            跳过一个 JSON 对象中字段的名称。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadObject">
      <summary>
            获取当前 JSON 对象的遍历器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
      <returns>返回一个键值对遍历器</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadArray">
      <summary>
            获取当前 JSON 数组的遍历器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
      <returns>返回一个值遍历器</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadPropertyName">
      <summary>
            读取 JSON 对象中字段的名称。
            </summary>
      <returns>返回一个字符串</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.ReadPropertyName(System.Int32@)">
      <summary>
            读取 JSON 对象中字段的名称。
            </summary>
      <param name="length">返回字符串长度</param>
      <returns>返回字符串第一个字符的引用</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.TryReadBeginObject">
      <summary>
            尝试读取对象的开始标识。
            </summary>
      <returns>返回当前 JSON 标识是否为对象开始</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.TryReadEndObject">
      <summary>
            尝试读取对象的结束标识。
            </summary>
      <returns>返回当前 JSON 标识是否为对象结束</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.TryReadBeginArray">
      <summary>
            尝试读取数组的开始标识。
            </summary>
      <returns>返回当前 JSON 标识是否为数组开始</returns>
    </member>
    <member name="M:Swifter.Json.IJsonReader.TryReadEndArray">
      <summary>
            尝试读取数组的结束标识。
            </summary>
      <returns>返回当前 JSON 标识是否为数组结束</returns>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsObject">
      <summary>
            当前 JSON 值是否为 Object。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsArray">
      <summary>
            当前 JSON 值是否为 Array。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsString">
      <summary>
            当前 JSON 值是否为 字符串。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsNumber">
      <summary>
            当前 JSON 值是否为 数字。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsNull">
      <summary>
            当前 JSON 值是否为 Null。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsBoolean">
      <summary>
            当前 JSON 值是否为 True/False。
            </summary>
    </member>
    <member name="P:Swifter.Json.IJsonReader.IsValue">
      <summary>
            当前 JSON 值是否为 文本值（没有引号）。
            </summary>
    </member>
    <member name="T:Swifter.Json.IJsonWriter">
      <summary>
            JSON Writer.
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.Flush">
      <summary>
            设置已写入的 JSON 内容长度到 HGCache 的内容数量中。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.Clear">
      <summary>
            重置 JSON 写入位置。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteGuid(System.Guid)">
      <summary>
            写入 Guid 值。
            </summary>
      <param name="value">Guid</param>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteDateTimeOffset(System.DateTimeOffset)">
      <summary>
            写入 DateTimeOffset 值。
            </summary>
      <param name="value">DateTimeOffset</param>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteBeginObject">
      <summary>
            写入 JSON 对象开始标识符。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteEndObject">
      <summary>
            写入 JSON 对象结束标识符。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteBeginArray">
      <summary>
            写入 JSON 数组开始标识符。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WriteEndArray">
      <summary>
            写入 JSON 数组结束标识符。
            </summary>
    </member>
    <member name="M:Swifter.Json.IJsonWriter.WritePropertyName(System.String)">
      <summary>
            写入 JSON 对象中的字段名称。
            </summary>
      <param name="name">字段名称</param>
    </member>
    <member name="T:Swifter.Json.JsonDeserializeException">
      <summary>
            Json 反序列化出错时的异常信息。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonDeserializeException.Line">
      <summary>
            反序列化出错所在行。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonDeserializeException.Column">
      <summary>
            反序列化出错所在列。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonDeserializeException.Index">
      <summary>
            反序列化出错所在索引。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonDeserializeException.Text">
      <summary>
            导致反序列化出错的文本。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonDeserializeException.Message">
      <summary>
            获取异常消息。
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonExtensions">
      <summary>
            提供 Json 格式化工具的扩展方法。
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonFormatter">
      <summary>
            JSON 文档格式化器。
            此类所有的静态方法和实例方法都是线程安全的。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatter.CharsPool">
      <summary>
            获取 JsonFormatter 使用的 HGlobalCache&lt;char&gt; 池。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatter.targeted_id">
      <summary>
            作为自定义值读写接口的 Id。
            </summary>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.#ctor(System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            初始化具有指定编码和指定配置项的 Json 格式化器。
            </summary>
      <param name="encoding">指定编码</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.#ctor(Swifter.Json.JsonFormatterOptions)">
      <summary>
            初始化默认编码 (UTF-8) 和指定配置项的 Json 格式化器。
            </summary>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.CreateJsonReader(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            创建 JSON 文档读取器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
      <param name="hGCache">JSON 内容缓存</param>
      <returns>返回一个 JSON 文档读取器</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.CreateJsonReader(System.String)">
      <summary>
            创建 JSON 文档读取器。注意：在读取器中，每个值都必须读且只读一次！
            </summary>
      <param name="text">JSON 字符串</param>
      <returns>返回一个 JSON 文档读取器</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.CreateJsonWriter(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            创建 JSON 文档写入器。注意：在写入器中请遵守规则写入，否则生成的 JSON 将不正常。
            </summary>
      <returns>返回一个 JSON 文档写入器</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0)">
      <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 缓存</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Char},Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 缓存</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.TextWriter,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.TextWriter)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.TextWriter,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.Text.Encoding)">
      <summary>
            将指定类型的实例序列化为 Json 字节数组。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="encoding">指定编码</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
      <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.Stream,System.Text.Encoding)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
      <param name="encoding">指定编码</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化为 Json 字节数组。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="encoding">指定编码</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObject``1(``0,System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
      <param name="encoding">指定编码</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.Stream,System.Text.Encoding)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
      <param name="encoding">指定编码</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeObjectAsync``1(``0,System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
      <param name="encoding">指定编码</param>
      <param name="options">指定配置项</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0)">
      <summary>
            将指定类型的实例序列化为 Json 字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将指定类型的实例序列化到 Json 缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 缓存</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.IO.TextWriter)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeAsync``1(``0,System.IO.TextWriter)">
      <summary>
            将指定类型的实例序列化到 Json 写入器中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="textWriter">Json 写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.Byte[]@)">
      <summary>
            将指定类型的实例序列化到 Json 字节数组中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="bytes">Json 字节数组</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            将指定类型的实例序列化到 Json 字节缓存中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="hGCache">Json 字节缓存</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Serialize``1(``0,System.IO.Stream)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.SerializeAsync``1(``0,System.IO.Stream)">
      <summary>
            将指定类型的实例序列化到 Json 输出流中。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的实例</param>
      <param name="stream">Json 输出流</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.String,System.Type)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.TextReader,System.Type)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.String)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.TextReader)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.TextReader)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.TextReader,System.Type)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.String,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Char},System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.TextReader,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.String,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Char},Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.TextReader,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.TextReader,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.TextReader,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.String,System.Type)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.String)">
      <summary>
            将 Json 字符串反序列化为指定类型的实例。
            </summary>
      <param name="text">Json 字符串</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将 Json 缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.IO.TextReader)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync``1(System.IO.TextReader)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync(System.IO.TextReader,System.Type)">
      <summary>
            将 Json 读取器反序列化为指定类型的实例。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.ArraySegment{System.Byte},System.Text.Encoding,System.Type)">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,System.Type)">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.Stream,System.Text.Encoding,System.Type)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.Stream,System.Text.Encoding)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.Stream,System.Text.Encoding)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.Stream,System.Text.Encoding,System.Type)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.ArraySegment{System.Byte},System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject(System.IO.Stream,System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.ArraySegment{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObject``1(System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync``1(System.IO.Stream,System.Text.Encoding,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <typeparam name="T">指定类型</typeparam>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeObjectAsync(System.IO.Stream,System.Text.Encoding,System.Type,Swifter.Json.JsonFormatterOptions)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="encoding">指定编码</param>
      <param name="type">指定类型</param>
      <param name="options">指定配置项</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.ArraySegment{System.Byte},System.Type)">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Byte},System.Type)">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize(System.IO.Stream,System.Type)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.ArraySegment{System.Byte})">
      <summary>
            将 Json 字节数组反序列化为指定类型的实例。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            将 Json 字节缓存反序列化为指定类型的实例。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.Deserialize``1(System.IO.Stream)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeAsync(System.IO.Stream,System.Type)">
      <summary>
            将 Json 输入流反序列化为指定类型的实例。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="type">指定类型</param>
      <returns>返回指定类型的实例</returns>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.String,Swifter.RW.IDataWriter)">
      <summary>
            将 Json 字符串反序列化到指定的数据写入器中。
            </summary>
      <param name="text">Json 字符串</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.RW.IDataWriter)">
      <summary>
            将 Json 缓存反序列化到指定的数据写入器中。
            </summary>
      <param name="hGCache">Json 缓存</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.IO.TextReader,Swifter.RW.IDataWriter)">
      <summary>
            将 Json 读取器反序列化到指定的数据写入器中。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeToAsync(System.IO.TextReader,Swifter.RW.IDataWriter)">
      <summary>
            将 Json 读取器反序列化到指定的数据写入器中。
            </summary>
      <param name="textReader">Json 读取器</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.ArraySegment{System.Byte},Swifter.RW.IDataWriter)">
      <summary>
            将 Json 字节数组反序列化到指定的数据写入器中。
            </summary>
      <param name="bytes">Json 字节数组</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Byte},Swifter.RW.IDataWriter)">
      <summary>
            将 Json 字节缓存反序列化到指定的数据写入器中。
            </summary>
      <param name="hGCache">Json 字节缓存</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeTo(System.IO.Stream,Swifter.RW.IDataWriter)">
      <summary>
            将 Json 输入流反序列化到指定的数据写入器中。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Json.JsonFormatter.DeserializeToAsync(System.IO.Stream,Swifter.RW.IDataWriter)">
      <summary>
            将 Json 输入流反序列化到指定的数据写入器中。
            </summary>
      <param name="stream">Json 输入流</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.DefaultMaxDepth">
      <summary>
            读取或设置默认最大结构深度。
            此值只在序列化时有效。
            可以通过枚举 JsonFormatterOptions 来配置序列化 (Serialize) 时结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.DefaultIndentedChars">
      <summary>
            读取或设置默认缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.DefaultLineCharsBreak">
      <summary>
            读取或设置默认换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.DefaultMiddleChars">
      <summary>
            读取或设置默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.MaxDepth">
      <summary>
            读取或设置最大结构深度。
            此值只在序列化时有效。
            可以通过枚举 JsonFormatterOptions 来配置序列化 (Serialize) 时结构深度超出该值时选择抛出异常还是不解析超出部分。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.IndentedChars">
      <summary>
            读取或设置缩进符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.LineBreakChars">
      <summary>
            读取或设置换行符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.MiddleChars">
      <summary>
            读取或设置默认 Key 与 Value 之间的分隔符，仅在枚举 JsonFormatterOptions 配置为 Indented (缩进美化) 时有效。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.Options">
      <summary>
            JSON 格式化器配置项。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonFormatter.Encoding">
      <summary>
            获取或设置字符编码。
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonFormatterOptions">
      <summary>
            JSON 格式化器配置项。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.Default">
      <summary>
            默认配置项。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.LoopReferencingException">
      <summary>
            序列化是出现循环引用的对象时将发生异常。该选项不能和其他引用配置复用。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.LoopReferencingNull">
      <summary>
            序列化是出现循环引用的对象时将用 Null 表示。该选项不能和其他引用配置复用。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingNull">
      <summary>
            序列化时跳过已序列化的对象，使用 Null 表示。该选项不能和其他引用配置复用。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.MultiReferencingReference">
      <summary>
            允许使用 $ref 写法表示重复引用的对象。该选项不能和其他引用配置复用。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.DeflateDeserialize">
      <summary>
            执行假定紧凑（无多余空格）且标准的 JSON 反序列化，此配置有效提高反序列化性能。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.StandardDeserialize">
      <summary>
            执行假定标准的 JSON 反序列化（即 不执行部分验证）。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.VerifiedDeserialize">
      <summary>
            执行完全验证的 JSON 反序列化（这是默认行为）。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.Indented">
      <summary>
            序列化时对 JSON 进行缩进美化。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.OutOfDepthException">
      <summary>
            超出深度时抛出异常，否则将不序列化超出部分。
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreNull">
      <summary>
            启用筛选并筛选掉 Null 值
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreZero">
      <summary>
            启用筛选并筛选掉 0 值
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.IgnoreEmptyString">
      <summary>
            启用筛选并筛选掉 "" 值 (空字符串)
            </summary>
    </member>
    <member name="F:Swifter.Json.JsonFormatterOptions.ArrayOnFilter">
      <summary>
            数组元素启用筛选
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonLoopReferencingException">
      <summary>
            Json 序列化时出现循环引用引发的异常。
            </summary>
    </member>
    <member name="M:Swifter.Json.JsonLoopReferencingException.#ctor(Swifter.RW.RWPathInfo,Swifter.RW.RWPathInfo)">
      <summary>
            初始化实例
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonOutOfDepthException">
      <summary>
            JSON 序列化时结构深度超出最大深度的异常。
            </summary>
    </member>
    <member name="M:Swifter.Json.JsonOutOfDepthException.#ctor">
      <summary>
            初始化实例
            </summary>
    </member>
    <member name="T:Swifter.Json.JsonValue">
      <summary>
            表示一个 Json 值。
            </summary>
    </member>
    <member name="M:Swifter.Json.JsonValue.ToString">
      <summary>
            获取这个值的 Json 字符串。
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Json.JsonValue.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Dynamic 对象尝试获取成员值。
            </summary>
      <param name="binder">成员信息</param>
      <param name="result">返回结果值</param>
      <returns>是否获取成功</returns>
    </member>
    <member name="M:Swifter.Json.JsonValue.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
            Dynamic 对象尝试获取索引器的值。
            </summary>
      <param name="binder">索引器信息</param>
      <param name="indexes">参数</param>
      <param name="result">返回结果值</param>
      <returns>是否获取成功</returns>
    </member>
    <member name="P:Swifter.Json.JsonValue.IsArray">
      <summary>
            获取这个 Json 值是否为数组。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.IsObject">
      <summary>
            获取这个 Json 值是否为对象。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.IsValue">
      <summary>
            获取这个 Json 值是否是一个基础值（数字，字符串，布尔，Null）。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.ObjectKeysCount">
      <summary>
            获取这个 Json 对象的字段数量。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.ObjectKeys">
      <summary>
            获取这个 Json 对象的字段集合。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.ObjectItems">
      <summary>
            获取这个 Json 对象的键值对集合。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.ArrayLength">
      <summary>
            获取这个 Json 数组的长度。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.Value">
      <summary>
            获取这个基础值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.Item(System.String)">
      <summary>
            获取这个 Json 对象中指定字段名称的 Json 值，没有该字段则返回 Null。
            </summary>
      <param name="name">指定字段名称</param>
      <returns>返回一个 Json 值</returns>
    </member>
    <member name="P:Swifter.Json.JsonValue.Item(System.Int32)">
      <summary>
            获取这个 Json 数组中指定索引处的 Json 值。超出索引将发生异常。
            </summary>
      <param name="index">指定索引</param>
      <returns>返回一个 Json 值</returns>
    </member>
    <member name="P:Swifter.Json.JsonValue.BooleanValue">
      <summary>
            获取这个 Json 值的布尔形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.CharValue">
      <summary>
            获取这个 Json 值的字符形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.SByteValue">
      <summary>
            获取这个 Json 值的有符号字节形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.ByteValue">
      <summary>
            获取这个 Json 值的无符号字节形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.Int16Value">
      <summary>
            获取这个 Json 值的 16 位有符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.UInt16Value">
      <summary>
            获取这个 Json 值的 16 位无符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.Int32Value">
      <summary>
            获取这个 Json 值的 32 位有符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.UInt32Value">
      <summary>
            获取这个 Json 值的 32 位无符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.Int64Value">
      <summary>
            获取这个 Json 值的 64 位有符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.UInt64Value">
      <summary>
            获取这个 Json 值的 64 位无符号整数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.SingleValue">
      <summary>
            获取这个 Json 值的单精度浮点数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.DoubleValue">
      <summary>
            获取这个 Json 值的双精度浮点数形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.DecimalValue">
      <summary>
            获取这个 Json 值的十进制数字形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.DateTimeValue">
      <summary>
            获取这个 Json 值的日期形式值。
            </summary>
    </member>
    <member name="P:Swifter.Json.JsonValue.StringValue">
      <summary>
            获取这个 Json 值的字符串形式值。
            </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
      <summary>
            指示应将所使用的成员上的值元组视为具有元素名称的元组。
            </summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
      <summary>
            初始化 System.Runtime.CompilerServices.TupleElementNamesAttribute 类的新实例。
            </summary>
      <param name="transformNames">一个字符串数组，该数组指示在类型构造的深度优先前序遍历中，哪个值元组事件应具有元素名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
      <summary>
            指示在类型构造的深度优先前序遍历中，哪个值元组元素应具有元素名称。
            </summary>
    </member>
    <member name="T:Swifter.VersionDifferences">
      <summary>
            该文档用于解决版本差异性。
            </summary>
    </member>
    <member name="F:Swifter.VersionDifferences.IsSupportEmit">
      <summary>
            获取当前平台是否支持 Emit。
            </summary>
    </member>
    <member name="F:Swifter.VersionDifferences.ObjectTypeHandleEqualsTypeHandle">
      <summary>
            获取一个值，表示 ObjectTypeHandle 和 TypeHandle 是否一致。
            </summary>
    </member>
    <member name="F:Swifter.VersionDifferences.AggressiveInlining">
      <summary>
            表示该方法尽量内敛。
            </summary>
    </member>
    <member name="M:Swifter.VersionDifferences.GetTypeHandle(System.Object)">
      <summary>
            获取对象的 TypeHandle 值。
            </summary>
      <param name="obj">对象</param>
      <returns>返回一个 IntPtr 值。</returns>
    </member>
    <member name="M:Swifter.VersionDifferences.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>
            定义动态程序集。
            </summary>
      <param name="assName">程序集名称</param>
      <param name="access">程序集的可访问性</param>
      <returns>返回动态程序集生成器</returns>
    </member>
    <member name="M:Swifter.VersionDifferences.IsByRefLike(System.Type)">
      <summary>
            判断是否为引用结构。
            </summary>
      <param name="type">类型</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="T:Swifter.Tools.ArrayHelper">
      <summary>
            提供对数组和集合操作的方法。
            </summary>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Filter``2(``0[],System.Func{``0,System.Boolean},System.Func{``0,``1})">
      <summary>
            筛选数组元素
            </summary>
      <typeparam name="TIn">输入数组类型</typeparam>
      <typeparam name="TOut">输出数组类型</typeparam>
      <param name="input">输入数组</param>
      <param name="filter">输入数组筛选器</param>
      <param name="asFunc">输入数组元素转输出数组元素委托</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Filter``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
      <summary>
            筛选数组元素
            </summary>
      <typeparam name="TIn">输入数组类型</typeparam>
      <typeparam name="TOut">输出数组类型</typeparam>
      <param name="input">输入源</param>
      <param name="filter">输入数组筛选器</param>
      <param name="asFunc">输入数组元素转输出数组元素委托</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
      <summary>
            复制集合元素到数组中。
            </summary>
      <typeparam name="T">元素类型</typeparam>
      <param name="collection">集合</param>
      <param name="array">数组</param>
      <param name="arrayIndex">数组起始索引</param>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Array,System.Int32)">
      <summary>
            复制集合元素到数组中。
            </summary>
      <param name="collection">集合</param>
      <param name="array">数组</param>
      <param name="arrayIndex">数组起始索引</param>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateRangeIterator(System.Int32,System.Int32)">
      <summary>
            创建 Int32 范围迭代器。
            </summary>
      <param name="start">起始值（包含）</param>
      <param name="end">结束值（不包含）</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateLengthIterator(System.Int32)">
      <summary>
            创建 Int32 长度迭代器。
            </summary>
      <param name="length">长度</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateNamesIterator(System.Data.IDataReader)">
      <summary>
            创建 String 系统数据读取器的字段名称迭代器。
            </summary>
      <param name="dbDataReader">系统数据读取器</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateNamesIterator(System.Data.DataTable)">
      <summary>
            创建 String 表格的字段名称迭代器。
            </summary>
      <param name="dataTable">表格</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateArrayIterator``1(``0[])">
      <summary>
            创建数组的迭代器。
            </summary>
      <typeparam name="T">数组类型</typeparam>
      <param name="array">数组</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateAsIterator``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            创建 XConvert 类型转换迭代器。
            </summary>
      <typeparam name="TIn">输入类型</typeparam>
      <typeparam name="TOut">输出类型</typeparam>
      <param name="input">输入迭代器</param>
      <returns>返回一个 yield 关键字实现的迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0[],``0)">
      <summary>
            合并一个数组和一个元素。
            </summary>
      <typeparam name="T">元素类型</typeparam>
      <param name="array">数组</param>
      <param name="tail">尾部元素</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0,``0[])">
      <summary>
            合并一个头部元素和一个数组。
            </summary>
      <typeparam name="T">元素类型</typeparam>
      <param name="array">数组</param>
      <param name="head">头部元素</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Merge``1(``0,``0[],``0)">
      <summary>
            合并一个头部元素和一个数组和一个尾部元素。
            </summary>
      <typeparam name="T">元素类型</typeparam>
      <param name="array">数组</param>
      <param name="head">头部元素</param>
      <param name="tail">尾部元素</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Ref``2(``0,System.Int32[])">
      <summary>
            获取数组指定索引处的引用。（只支持 16 维度以内的数组）
            </summary>
      <typeparam name="TArray">数组类型</typeparam>
      <typeparam name="TElement">元素类型</typeparam>
      <param name="array">数组</param>
      <param name="indices">索引</param>
      <returns>返回一个引用</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.CreateInstance``2(System.Int32[])">
      <summary>
            创建数组实例。（只支持 16 维度以内的数组）
            </summary>
      <typeparam name="TArray">数组类型</typeparam>
      <typeparam name="TElement">元素类型</typeparam>
      <param name="lengths">数组各个维度的长度</param>
      <returns>返回一个数组</returns>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Resize``2(``0@,System.Int32[])">
      <summary>
            重写分配数组的大小。（只支持 16 维度以内的数组）
            </summary>
      <typeparam name="TArray">数组类型</typeparam>
      <typeparam name="TElement">元素类型</typeparam>
      <param name="array">数组</param>
      <param name="lengths">新的长度</param>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Copy``2(``0,``0,System.Int32[])">
      <summary>
            从 0 索引处开始复制数组内容。（只支持 16 维度以内的数组）
            </summary>
      <typeparam name="TArray">数组类型</typeparam>
      <typeparam name="TElement">元素类型</typeparam>
      <param name="source">源数组</param>
      <param name="destination">目标数组</param>
      <param name="lengths">各个维度的长度</param>
    </member>
    <member name="M:Swifter.Tools.ArrayHelper.Add``1(System.Collections.Generic.Dictionary{``0,System.Boolean},``0,System.Boolean)">
      <summary>
            往标识符列表中添加一个标识符。
            </summary>
      <typeparam name="TKey">标识符类型</typeparam>
      <param name="identities">标识符列表</param>
      <param name="identity">标识符</param>
      <param name="value">一个 bool 值，默认为 true</param>
    </member>
    <member name="T:Swifter.Tools.XConvert">
      <summary>
      </summary>
    </member>
    <member name="M:Swifter.Tools.XConvert.Convert``2(``0)">
      <summary>
      </summary>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TDestination">
      </typeparam>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.XConvert.ToObject``1(``0,System.Type)">
      <summary>
      </summary>
      <typeparam name="TSource">
      </typeparam>
      <param name="value">
      </param>
      <param name="outType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.XConvert.FromObject``1(System.Object)">
      <summary>
      </summary>
      <typeparam name="TDestination">
      </typeparam>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.XConvert.Cast(System.Object,System.Type)">
      <summary>
      </summary>
      <param name="value">
      </param>
      <param name="outType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Swifter.Tools.IXConvert`2">
      <summary>
            XConvert 内部实现接口。
            </summary>
      <typeparam name="TSource">原类型</typeparam>
      <typeparam name="TDestination">目标类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.IXConvert`2.Convert(`0)">
      <summary>
            将原类型的值转换为目标类型的值。
            </summary>
      <param name="value">原类型的值</param>
      <returns>返回目标类型的值</returns>
    </member>
    <member name="T:Swifter.Tools.XConvert`1">
      <summary>
      </summary>
      <typeparam name="TDestination">
      </typeparam>
    </member>
    <member name="M:Swifter.Tools.XConvert`1.Convert``1(``0)">
      <summary>
      </summary>
      <typeparam name="TSource">
      </typeparam>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.XConvert`1.FromObject(System.Object)">
      <summary>
      </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Swifter.Tools.MethodHelper">
      <summary>
            函数帮助工具类。
            </summary>
    </member>
    <member name="M:Swifter.Tools.MethodHelper.CreateDelegate``1(System.Reflection.MethodBase,System.Boolean)">
      <summary>
            创建一个指定类型的委托。
            </summary>
      <typeparam name="T">委托类型</typeparam>
      <param name="methodInfo">需要创建委托的方法</param>
      <param name="throwExceptions">当参数或返回值类型不兼容时是否发生异常。</param>
      <returns>返回一个委托或 Null。</returns>
    </member>
    <member name="M:Swifter.Tools.MethodHelper.CreateDelegate(System.Reflection.MethodBase,System.Boolean)">
      <summary>
            创建一个未知类型的委托。
            </summary>
      <param name="methodInfo">需要创建委托的方法</param>
      <param name="throwExceptions">当参数或返回值类型不兼容时是否发生异常。</param>
      <returns>返回一个委托或 Null。</returns>
    </member>
    <member name="T:Swifter.Tools.MethodSign">
      <summary>
            函数参数签名标识
            </summary>
    </member>
    <member name="M:Swifter.Tools.MethodSign.#ctor(System.String,System.Type[],System.Type,System.Boolean)">
      <summary>
            构造函数参数签名标识
            </summary>
      <param name="name">函数的名称</param>
      <param name="parametersTypes">函数的参数类型</param>
      <param name="returnType">函数的返回值类型</param>
      <param name="internal">内部调用</param>
    </member>
    <member name="M:Swifter.Tools.MethodSign.#ctor(System.String,System.Type[],System.Type)">
      <summary>
            构造函数参数签名标识
            </summary>
      <param name="name">函数的名称</param>
      <param name="parametersTypes">函数的参数类型</param>
      <param name="returnType">函数的返回值类型</param>
    </member>
    <member name="M:Swifter.Tools.MethodSign.GetHashCode">
      <summary>
            返回此方法签名 HashCode。此值考虑方法名，参数，返回值生成。
            </summary>
      <returns>一个 HashCode 值。</returns>
    </member>
    <member name="M:Swifter.Tools.MethodSign.Equals(System.Object)">
      <summary>
            比较一个对象的实例是否为 MethodSign 类型，并且和当前实例的签名相同。
            </summary>
      <param name="obj">对象的实例</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.MethodSign.op_Equality(Swifter.Tools.MethodSign,Swifter.Tools.MethodSign)">
      <summary>
            比较两个 MethodSign 是否相同。
            </summary>
      <param name="XSign">第一个 MethodSign。</param>
      <param name="YSign">第二个 MethodSign。</param>
      <returns>两个 MethodSign 是否相同。</returns>
    </member>
    <member name="M:Swifter.Tools.MethodSign.op_Inequality(Swifter.Tools.MethodSign,Swifter.Tools.MethodSign)">
      <summary>
            比较两个 MethodSign 是否不相同。
            </summary>
      <param name="XSign">第一个 MethodSign。</param>
      <param name="YSign">第二个 MethodSign。</param>
      <returns>两个 MethodSign 是否不相同。</returns>
    </member>
    <member name="T:Swifter.Tools.RuntimeMethodSign">
      <summary>
            运行时函数参数签名标识
            </summary>
    </member>
    <member name="M:Swifter.Tools.RuntimeMethodSign.GetHashCode">
      <summary>
            返回此方法签名 HashCode。此值考虑方法名和参数生成。
            </summary>
      <returns>一个 HashCode 值。</returns>
    </member>
    <member name="M:Swifter.Tools.RuntimeMethodSign.Equals(System.Object)">
      <summary>
            比较一个对象的实例是否为 RuntimeMethodSign 类型，并且和当前实例的签名相同。
            </summary>
      <param name="obj">对象的实例</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.RuntimeMethodSign.op_Implicit(System.ValueTuple{System.String,System.Object[]})~Swifter.Tools.RuntimeMethodSign">
      <summary>
            构造运行时函数参数签名标识
            </summary>
      <param name="methodSign">包含函数名称和函数参数</param>
    </member>
    <member name="M:Swifter.Tools.RuntimeMethodSign.op_Implicit(System.ValueTuple{System.String,System.Type[]})~Swifter.Tools.RuntimeMethodSign">
      <summary>
            构造运行时函数参数签名标识
            </summary>
      <param name="methodSign">包含函数名称和函数参数类型</param>
    </member>
    <member name="T:Swifter.Tools.RuntimeParamsSign">
      <summary>
            表示函数的参数签名标识
            </summary>
    </member>
    <member name="M:Swifter.Tools.RuntimeParamsSign.GetHashCode">
      <summary>
            返回此方法签名 HashCode。此值只考虑参数生成。
            </summary>
      <returns>一个 HashCode 值。</returns>
    </member>
    <member name="M:Swifter.Tools.RuntimeParamsSign.Equals(System.Object)">
      <summary>
            比较一个对象的实例是否为 RuntimeParamsSign 类型，并且和当前实例的签名相同。
            </summary>
      <param name="obj">对象的实例</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.RuntimeParamsSign.op_Implicit(System.Type[])~Swifter.Tools.RuntimeParamsSign">
      <summary>
            隐式构建函数的参数签名标识。
            </summary>
      <param name="types">参数类型集合</param>
    </member>
    <member name="M:Swifter.Tools.RuntimeParamsSign.op_Implicit(System.Object[])~Swifter.Tools.RuntimeParamsSign">
      <summary>
            隐式构建函数的参数签名标识。
            </summary>
      <param name="parameters">参数对象集合</param>
    </member>
    <member name="T:Swifter.Tools.DateTimeHelper">
      <summary>
            提供对象日期和时间操作的方法。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfUTCDifference">
      <summary>
            本地时间与 UTC 时间的时差 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfOneMillisecond">
      <summary>
            一毫秒的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfOneSecond">
      <summary>
            一秒的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfOneMinute">
      <summary>
            一分钟的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfOneHour">
      <summary>
            一小时的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfOneDay">
      <summary>
            一天的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.TicksOfUnixEpoch">
      <summary>
            1970-01-01 的 Tick 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.NanosecondsOfTick">
      <summary>
            1 Tick 的纳秒值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.DateTimeHelper.ISOStringMaxLength">
      <summary>
            ISO 格式日期字符串的最大长度。
            </summary>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTime,System.Char*)">
      <summary>
            将日期和时间以 ISO8061 格式字符串写入到字符串中。
            </summary>
      <param name="value">日期和时间</param>
      <param name="chars">字符串</param>
      <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTimeOffset,System.Char*)">
      <summary>
            将日期和时间点以 ISO8061 格式字符串写入到字符串中。
            </summary>
      <param name="value">日期和时间点</param>
      <param name="chars">字符串</param>
      <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToUTCISOString(System.DateTime,System.Char*)">
      <summary>
            将日期和时间的 UTC 时间以 ISO8061 格式字符串写入到字符串中。
            </summary>
      <param name="value">日期和时间</param>
      <param name="chars">字符串</param>
      <returns>返回写入结束位置，最后一个字符写入位置 + 1。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTime)">
      <summary>
            将日期和时间以 ISO8061 格式化字符串。
            </summary>
      <param name="value">日期和时间</param>
      <returns>返回一个字符串。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToISOString(System.DateTimeOffset)">
      <summary>
            将日期和时间点以 ISO8061 格式化字符串。
            </summary>
      <param name="value">日期和时间点</param>
      <returns>返回一个字符串。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.ToUTCISOString(System.DateTime)">
      <summary>
            将日期和时间的 UTC 时间以 ISO8061 格式化字符串。
            </summary>
      <param name="value">日期和时间</param>
      <returns>返回一个字符串。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTime@,System.Int64@)">
      <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">解析结束位置。</param>
      <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
      <param name="difference">返回解析出的时间差</param>
      <returns>返回成功或失败。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTime@)">
      <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">解析结束位置。</param>
      <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
      <returns>返回成功或失败。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.String,System.DateTime@)">
      <summary>
            尝试解析 ISO8061 格式日期和时间字符串。
            </summary>
      <param name="text">字符串</param>
      <param name="value">成功返回日期和时间对象，失败返回日期和时间最小值。</param>
      <returns>返回成功或失败。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.Char*,System.Int32,System.DateTimeOffset@)">
      <summary>
            尝试解析 ISO8061 格式日期和时间点字符串。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">解析结束位置。</param>
      <param name="value">成功返回日期和时间点对象，失败返回日期和时间点最小值。</param>
      <returns>返回成功或失败。</returns>
    </member>
    <member name="M:Swifter.Tools.DateTimeHelper.TryParseISODateTime(System.String,System.DateTimeOffset@)">
      <summary>
            尝试解析 ISO8061 格式日期和时间点字符串。
            </summary>
      <param name="text">字符串</param>
      <param name="value">成功返回日期和时间点对象，失败返回日期和时间点最小值。</param>
      <returns>返回成功或失败。</returns>
    </member>
    <member name="T:Swifter.Tools.NumberHelper">
      <summary>
            提供数字类的方法。
            这些方法都是高效的。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.MaxRadix">
      <summary>
            支持的最大进制。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.MinRadix">
      <summary>
            支持的最小进制。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.IgnoreCaseMaxRadix">
      <summary>
            忽略大小写的前提下支持的最大进制。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.PositiveSign">
      <summary>
            正负号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.NegativeSign">
      <summary>
            负符号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.InfinitySign">
      <summary>
            无限大符号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.ExponentSign">
      <summary>
            指数符号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.exponentSign">
      <summary>
            指数符号（小写）。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.DotSign">
      <summary>
            点符号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.HexSign">
      <summary>
            十六进制字符。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.hexSign">
      <summary>
            十六进制字符（小写）。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.BinarySign">
      <summary>
            二进制字符。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.binarySign">
      <summary>
            二进制字符（小写）。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.NaNSign">
      <summary>
            非数字符号。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.NSign">
      <summary>
            非数字符号的首字符。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.SplitSign">
      <summary>
            数字之间的分隔符。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.DecimalStringMaxLength">
      <summary>
            十进制数字字符串最大可能的长度。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.GuidStringLength">
      <summary>
            Guid 字符串的长度。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.Decimal">
      <summary>
            十进制实例。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.Hex">
      <summary>
            十六进制实例。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.Octal">
      <summary>
            八进制实例。
            </summary>
    </member>
    <member name="F:Swifter.Tools.NumberHelper.Binary">
      <summary>
            二进制实例。
            </summary>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.#ctor(System.Byte)">
      <summary>
            初始化实例。
            </summary>
      <param name="radix">指定进制</param>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Finalize">
      <summary>
            释放内存。
            </summary>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.UncheckedParse(System.Char*,System.Int32)">
      <summary>
            从字符串中强制解析出一个 Int64 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="count">字符串长度</param>
      <returns>返回一个 Int64 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetPositiveExponent(System.Double)">
      <summary>
            获取整数部分位数。
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetExponent(System.Double)">
      <summary>
            获取 Double 的指数值。
            </summary>
      <param name="value">Double</param>
      <returns>返回指数</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetNegativeExponent(System.Double)">
      <summary>
            获取数字需要移动多少位才能大于等于 1。
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Double,System.Char*)">
      <summary>
            将一个 Double 值写入到空间足够的字符串中。
            </summary>
      <param name="value">Double 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Pow(System.Double,System.Int32)">
      <summary>
            对浮点数乘以指定次数的进制数。
            </summary>
      <param name="x">浮点数</param>
      <param name="y">指定次数</param>
      <returns>返回一个浮点数</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Single,System.Char*)">
      <summary>
            将一个 Single 值写入到空间足够的字符串中。
            </summary>
      <param name="value">Single 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.Double@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Double 值。此方法允许指数。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Double 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Double)">
      <summary>
            将 Double 值转换为字符串表现形式。
            </summary>
      <param name="value">Double 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Single)">
      <summary>
            将 Single 值转换为字符串表现形式。
            </summary>
      <param name="value">Single 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.Double@)">
      <summary>
            尝试将字符串转换为 Double 值。
            </summary>
      <param name="text">字符串</param>
      <param name="value">返回一个 Double 值</param>
      <returns>返回转换是否成功</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseDouble(System.String)">
      <summary>
            将字符串转换为 Double 值。失败将引发异常。
            </summary>
      <param name="text">字符串</param>
      <returns>返回一个 Double 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetLength(System.UInt64)">
      <summary>
            获取 UInt64 值的字符串表现形式长度。
            </summary>
      <param name="value">UInt64 值</param>
      <returns>返回字符串表现形式长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt64,System.Char*)">
      <summary>
            将一个 UInt64 值写入到空间足够的字符串中。
            </summary>
      <param name="value">UInt64 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt64,System.Byte,System.Char*)">
      <summary>
            将指定长度的 UInt64 值写入到空间足够的字符串中。
            </summary>
      <param name="value">UInt64 值</param>
      <param name="length">指定长度</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Int64,System.Char*)">
      <summary>
            将一个 Int64 值写入到空间足够的字符串中。
            </summary>
      <param name="value">Int64 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt32*,System.Int32,System.Char*)">
      <summary>
            将一个字节正整数写入到空间足够的字符串中。
            </summary>
      <param name="value">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt64)">
      <summary>
            将 UInt64 值转换为字符串表现形式。
            </summary>
      <param name="value">UInt64 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Int64)">
      <summary>
            将 Int64 值转换为字符串表现形式。
            </summary>
      <param name="value">Int64 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.UInt32*,System.Int32)">
      <summary>
            将字节正整数转换为字符串表现形式。
            </summary>
      <param name="value">字节正整数</param>
      <param name="length">字节正整数长度</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.DirectOperateToString(System.UInt32*,System.Int32,System.Char*)">
      <summary>
            将一个字节正整数写入到空间足够的字符串中。此方法对字节正整数直接运算，所以会改变它的值。
            </summary>
      <param name="value">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.Int64@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Int64 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Int64 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.UInt64@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 UInt64 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 UInt64 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.UInt32*,System.Int32@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个字节正整数值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">字节正整数空间</param>
      <param name="writeCount">返回写入长度</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.Int32@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Int32 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Int32 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.Int64@)">
      <summary>
            尝试将字符串转换为 Int64 值。
            </summary>
      <param name="text">字符串</param>
      <param name="value">返回一个 Int64 值</param>
      <returns>返回转换是否成功</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.UInt64@)">
      <summary>
            尝试将字符串转换为 UInt64 值。
            </summary>
      <param name="text">字符串</param>
      <param name="value">返回一个 UInt64 值</param>
      <returns>返回转换是否成功</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.UInt32*,System.Int32@)">
      <summary>
            尝试将字符串转换为字节正整数值。
            </summary>
      <param name="text">
      </param>
      <param name="value">字节正整数</param>
      <param name="length">返回写入长度</param>
      <returns>返回转换是否成功</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseInt64(System.String)">
      <summary>
            将字符串转换为 Int64 值。失败将引发异常。
            </summary>
      <param name="text">字符串</param>
      <returns>返回一个 Int64 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseUInt64(System.String)">
      <summary>
            将字符串转换为 UInt64 值。失败将引发异常。
            </summary>
      <param name="text">字符串</param>
      <returns>返回一个 UInt64 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseBigInteger(System.String,System.UInt32*)">
      <summary>
            将字符串转换为字节正整数值。失败将引发异常。
            </summary>
      <param name="text">字符串</param>
      <param name="value">字节正整数</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetNumberInfo(System.Char*,System.Int32,System.Byte)">
      <summary>
            创建一个 NumberInfo。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="defaultRadix">默认进制数</param>
      <returns>返回一个 NumberInfo</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetNumberInfo(System.String,System.Byte)">
      <summary>
            创建一个 NumberInfo，注意：实用此方法请保证字符串内容不会被移址。
            </summary>
      <param name="chars">字符串</param>
      <param name="defaultRadix">默认进制数</param>
      <returns>返回一个 NumberInfo</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetNumberInfo(System.Char*,System.Int32)">
      <summary>
            创建一个 NumberInfo。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回一个 NumberInfo</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetNumberInfo(System.String)">
      <summary>
            获取一个字符串的 NumberInfo。注意：实用此方法请保证字符串内容不会被移址。
            </summary>
      <param name="chars">字符串</param>
      <returns>返回一个 NumberInfo</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToUInt64(Swifter.Tools.NumberInfo)">
      <summary>
            将 NumberInfo 转换为 UInt64。失败将引发异常。
            </summary>
      <param name="numberInfo">NumberInfo</param>
      <returns>返回一个 UInt64</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToInt64(Swifter.Tools.NumberInfo)">
      <summary>
            将 NumberInfo 转换为 Int64。失败将引发异常。
            </summary>
      <param name="numberInfo">NumberInfo</param>
      <returns>返回一个 Int64</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToDouble(Swifter.Tools.NumberInfo)">
      <summary>
            将 NumberInfo 转换为 Double。失败将引发异常。
            </summary>
      <param name="numberInfo">NumberInfo</param>
      <returns>返回一个 Double</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.InstanceByRadix(System.Byte)">
      <summary>
            获取指定进制的 NumberHelper 实例。
            </summary>
      <param name="radix">进制数</param>
      <returns>返回 NumberHelper 实例</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.DecimalTryParse(System.Char*,System.Int32,System.Int64@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Int64 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Int64 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.DecimalTryParse(System.Char*,System.Int32,System.UInt64@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 UInt64 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 UInt64 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Guid,System.Char*)">
      <summary>
            将一个 Guid 值写入到一个空间足够的字符串中。
            </summary>
      <param name="value">Guid 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度。</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.GetScale(System.Decimal*)">
      <summary>
            获取一个十进制数字的小数刻度。
            </summary>
      <param name="pDecimal">十进制数字的指针</param>
      <returns>返回小数的位数</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Decimal,System.Char*)">
      <summary>
            将一个 Decimal 值写入到一个空间足够的字符串中。
            </summary>
      <param name="value">Decimal 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToDecimalString(System.UInt64,System.Char*)">
      <summary>
            将一个 UInt64 值以十进制格式写入到一个空间足够的字符串中。
            </summary>
      <param name="value">UInt64 值</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToDecimalString(System.UInt64,System.Byte,System.Char*)">
      <summary>
            将指定长度的 UInt64 值以十进制格式写入到空间足够的字符串中。
            </summary>
      <param name="value">UInt64 值</param>
      <param name="length">指定长度</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.DirectOperateToDecimalString(System.UInt32*,System.Int32,System.Char*)">
      <summary>
            将一个字节正整数写入到空间足够的字符串中。此方法对字节正整数直接运算，所以会改变它的值。
            </summary>
      <param name="value">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="chars">空间足够的字符串</param>
      <returns>返回写入长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.Guid@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Guid 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Guid 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.IsExp(System.Char)">
      <summary>
            判断一个字符是否为数字的特殊意义字符。
            </summary>
      <param name="c">字符</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.Char*,System.Int32,System.Decimal@,System.Boolean)">
      <summary>
            尝试从字符串开始位置解析一个 Decimal 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="value">返回一个 Decimal 值</param>
      <param name="exception">当解析到错误时是否引发异常，异常不代表解析失败。</param>
      <returns>解析成功则返回解析的长度，失败则返回 0</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToDecimal(Swifter.Tools.NumberInfo)">
      <summary>
            将一个 NumberInfo 转换为 Decimal。转换失败则引发异常。
            </summary>
      <param name="numberInfo">NumberInfo</param>
      <returns>返回一个 Decimal</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Mult(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
      <summary>
            字节正整数乘以 UInt32 值。
            </summary>
      <param name="number">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="value">UInt32 值</param>
      <param name="carry">进位值</param>
      <returns>返回字节正整数的长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Div(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
      <summary>
            字节正整数除以 UInt32 值。
            </summary>
      <param name="number">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="value">UInt32 值</param>
      <param name="remainder">余数</param>
      <returns>返回字节正整数的长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Add(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
      <summary>
            字节正整数加上 UInt32 值。
            </summary>
      <param name="number">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="value">UInt32 值</param>
      <param name="carry">进位值</param>
      <returns>返回字节正整数的长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.Sub(System.UInt32*,System.Int32,System.UInt32,System.UInt32@)">
      <summary>
            字节正整数减去 UInt32 值。
            </summary>
      <param name="number">字节正整数</param>
      <param name="length">字节正整数的长度</param>
      <param name="value">UInt32 值</param>
      <param name="remainder">余数</param>
      <returns>返回字节正整数的长度</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Guid)">
      <summary>
            将一个 Guid 值转换为 String 表现形式。转换失败将引发异常。
            </summary>
      <param name="value">Guid 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ToString(System.Decimal)">
      <summary>
            将一个 Decimal 值转换为 String 表现形式。转换失败将引发异常。
            </summary>
      <param name="value">Decimal 值</param>
      <returns>返回一个 String 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.Guid@)">
      <summary>
            尝试将 String 值转换为 Guid 值。
            </summary>
      <param name="text">String 值</param>
      <param name="value">返回 Guid 值</param>
      <returns>返回成功否</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseGuid(System.String)">
      <summary>
            将 String 值转换为 Guid 值。失败将引发异常。
            </summary>
      <param name="text">String 值</param>
      <returns>返回 Guid 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.TryParse(System.String,System.Decimal@)">
      <summary>
            尝试将 String 值转换为 Decimal 值。
            </summary>
      <param name="text">String 值</param>
      <param name="value">返回 Decimal 值</param>
      <returns>返回成功否</returns>
    </member>
    <member name="M:Swifter.Tools.NumberHelper.ParseDecimal(System.String)">
      <summary>
            将 String 值转换为 Decimal 值。失败将引发异常。
            </summary>
      <param name="text">String 值</param>
      <returns>返回 Decimal 值</returns>
    </member>
    <member name="T:Swifter.Tools.NumberInfo">
      <summary>
            储存一个字符串的数字信息
            </summary>
    </member>
    <member name="M:Swifter.Tools.NumberInfo.ToString">
      <summary>
            获取此数字的信息的字符串表现形式。
            </summary>
      <returns>返回一个 string 值</returns>
    </member>
    <member name="M:Swifter.Tools.NumberInfo.ToDouble">
      <summary>
            转换为 Double。失败将引发异常。
            </summary>
      <returns>返回一个 Double</returns>
    </member>
    <member name="M:Swifter.Tools.NumberInfo.ToDecimal">
      <summary>
            转换为 Double。失败将引发异常。
            </summary>
      <returns>返回一个 Double</returns>
    </member>
    <member name="M:Swifter.Tools.NumberInfo.ToUInt64">
      <summary>
            转换为 UInt64。失败将引发异常。
            </summary>
      <returns>返回一个 Double</returns>
    </member>
    <member name="M:Swifter.Tools.NumberInfo.ToInt64">
      <summary>
            转换为 Int64。失败将引发异常。
            </summary>
      <returns>返回一个 Double</returns>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.IsFloat">
      <summary>
            获取该数字是否为浮点数。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.IsNegative">
      <summary>
            获取该数字是否为负数。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.ExponentIsNegative">
      <summary>
            获取该数字的指数是否为负数。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.IntegerCount">
      <summary>
            获取该数字的整数部分的长度。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.FractionalCount">
      <summary>
            获取该数字的小数部分的长度。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.ExponentCount">
      <summary>
            获取该数字的指数的长度。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.IsNumber">
      <summary>
            获取该字符串是否是一个数字。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.HaveExponent">
      <summary>
            获取是否存在指数。
            此值不考虑是否为数字。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.IsDecimal">
      <summary>
            获取是否为十进制数字。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.End">
      <summary>
            获取此数字在字符串中的结束位置，数字内容不包含此位置。
            </summary>
    </member>
    <member name="P:Swifter.Tools.NumberInfo.Radix">
      <summary>
            获取此数字的进制数。
            </summary>
    </member>
    <member name="T:Swifter.Tools.BaseCache`2">
      <summary>
            提供高效读取的缓存字典。
            </summary>
      <typeparam name="TKey">缓存键类型</typeparam>
      <typeparam name="TValue">缓存值类型</typeparam>
    </member>
    <member name="T:Swifter.Tools.BaseCache`2.Entity">
      <summary>
            内部储存结构信息。
            </summary>
    </member>
    <member name="P:Swifter.Tools.BaseCache`2.Entity.Value">
      <summary>
            当前 Entity 的值。
            </summary>
    </member>
    <member name="T:Swifter.Tools.BaseCache`2.IGetOrCreate`1">
      <summary>
            允许高效缓存获取或创建的接口。
            </summary>
      <typeparam name="TToken">Token 类型</typeparam>
    </member>
    <member name="F:Swifter.Tools.BaseCache`2.MaxCapacity">
      <summary>
            表示可以扩容的最大缓存容量。
            </summary>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetEnumerable">
      <summary>
            获取缓存的键值迭代器。
            </summary>
      <returns>返回一个迭代器</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.FillFrom(Swifter.Tools.BaseCache{`0,`1})">
      <summary>
            将指定缓存的集合复制到本实例中。
            </summary>
      <param name="source">指定缓存</param>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.ComputeHashCode(`0)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.Equals(`0,`0)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetValues(`0)">
      <summary>
            获取指定键的值集合。
            </summary>
      <param name="key">
      </param>
      <returns>返回一个值的迭代器。</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.LockGetOrAdd(`0,System.Func{`0,`1})">
      <summary>
            获取或新增一个缓存。
            该方法是线程同步的，它会将当前对象作为锁。
            </summary>
      <param name="key">缓存键</param>
      <param name="func">获取缓存值</param>
      <returns>返回缓存值</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.LockSetOrAdd(`0,`1)">
      <summary>
            设置或新增一个缓存。
            该方法是线程同步的，它会将当前对象作为锁。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.Clear">
      <summary>
            清空所有键值。
            </summary>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary>
            获取或新增一个缓存，该方法不是线程同步的。
            </summary>
      <param name="key">缓存键</param>
      <param name="func">获取缓存值</param>
      <returns>返回缓存值</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetOrCreate``2(``0,``1)">
      <summary>
            获取或新增一个缓存。
            该方法是线程同步的，它会将第一个参数作为锁。
            </summary>
      <typeparam name="T">当前实例的类型，它必须实现 IGetOrCreate&lt;TToken&gt; 接口。</typeparam>
      <typeparam name="TToken">Token 类型</typeparam>
      <param name="this">当前实例</param>
      <param name="token">token 值</param>
      <returns>返回缓存值</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetOrCreate``1(``0,`0)">
      <summary>
            获取或新增一个缓存。
            该方法是线程同步的，它会将第一个参数作为锁。
            </summary>
      <typeparam name="T">当前实例的类型，它必须实现 IGetOrCreate&lt;TToken&gt; 接口。</typeparam>
      <param name="this">当前实例</param>
      <param name="key">token 值</param>
      <returns>返回缓存值</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.TryAdd(`0,`1)">
      <summary>
            尝试添加一个缓存。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
      <returns>返回是否成功添加</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.DirectAdd(`0,`1)">
      <summary>
            直接添加一个缓存，不管是否存在。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.Add(`0,`1)">
      <summary>
            新增缓存。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
      <exception cref="T:System.ArgumentException">当 Key 存在时发生此异常</exception>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.LockAdd(`0,`1)">
      <summary>
            新增缓存。
            该方法是线程同步的，它会将当前对象作为锁。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
      <exception cref="T:System.ArgumentException">当 Key 存在时发生此异常</exception>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.LockDirectAdd(`0,`1)">
      <summary>
            直接添加一个缓存，不管是否存在。
            该方法是线程同步的，它会将当前对象作为锁。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">缓存值</param>
      <exception cref="T:System.ArgumentException">当 Key 存在时发生此异常</exception>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.TryGetValue(`0,`1@)">
      <summary>
            尝试获取缓存的值。
            </summary>
      <param name="key">缓存键</param>
      <param name="value">返回缓存的值</param>
      <returns>返回 Key 是否存在</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.GetValue(`0)">
      <summary>
            获取缓存的值或 default。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回缓存的值或 default</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.Remove(`0)">
      <summary>
            移除指定缓存
            </summary>
      <param name="key">缓存键</param>
      <returns>返回是否有移除缓存</returns>
    </member>
    <member name="M:Swifter.Tools.BaseCache`2.RemoveAll(`0)">
      <summary>
            移除指定键的所有缓存。
            </summary>
      <param name="key">缓存键</param>
    </member>
    <member name="P:Swifter.Tools.BaseCache`2.Item(`0)">
      <summary>
            读取或设置缓存的值。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回缓存的值</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">读取时，当 Key 不存在是发生此异常。</exception>
    </member>
    <member name="P:Swifter.Tools.BaseCache`2.Count">
      <summary>
            获取缓存数量。
            </summary>
    </member>
    <member name="T:Swifter.Tools.BaseObjectPool`1">
      <summary>
            提供对象池的基类。
            </summary>
      <typeparam name="T">对象类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.BaseObjectPool`1.Rent">
      <summary>
            借出一个实例。（借出的实例不一定要归还，平衡选择，如果归还成本大于实例本身，可以选择不归还实例。）
            </summary>
      <returns>返回一个实例</returns>
    </member>
    <member name="M:Swifter.Tools.BaseObjectPool`1.Return(`0)">
      <summary>
            归还一个实例。
            </summary>
      <param name="obj">实例</param>
    </member>
    <member name="M:Swifter.Tools.BaseObjectPool`1.CreateInstance">
      <summary>
            由派生类重写的创建实例方法。
            </summary>
      <returns>返回一个实例</returns>
    </member>
    <member name="T:Swifter.Tools.HGlobalCachePool`1">
      <summary>
            全局缓存的对象池。
            </summary>
      <typeparam name="T">缓存类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.HGlobalCachePool`1.CreateInstance">
      <summary>
            创建全局缓存实例。
            </summary>
      <returns>返回一个实例</returns>
    </member>
    <member name="T:Swifter.Tools.HashCache`2">
      <summary>
            提供泛型类为键的缓存类。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.HashCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="equalityComparer">缓存键的比较器</param>
    </member>
    <member name="M:Swifter.Tools.HashCache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
      <param name="equalityComparer">缓存键的比较器</param>
    </member>
    <member name="M:Swifter.Tools.HashCache`2.ComputeHashCode(`0)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.HashCache`2.Equals(`0,`0)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.HGlobalCache`1">
      <summary>
            提供指定值类型的全局内存缓存。
            </summary>
      <typeparam name="T">指定值类型</typeparam>
    </member>
    <member name="F:Swifter.Tools.HGlobalCache`1.AbsolutelyMaxSize">
      <summary>
            可以设置的最大缓存大小。
            </summary>
    </member>
    <member name="F:Swifter.Tools.HGlobalCache`1.AbsolutelyMinSize">
      <summary>
            可以设置的最小缓存大小。
            </summary>
    </member>
    <member name="F:Swifter.Tools.HGlobalCache`1.Count">
      <summary>
            T 元素的内容数量。
            </summary>
    </member>
    <member name="M:Swifter.Tools.HGlobalCache`1.#ctor">
      <summary>
            创建全局缓存实例。
            </summary>
    </member>
    <member name="M:Swifter.Tools.HGlobalCache`1.Finalize">
      <summary>
            释放全局内存。
            </summary>
    </member>
    <member name="M:Swifter.Tools.HGlobalCache`1.Expand(System.Int32)">
      <summary>
            扩展字符串长度。
            </summary>
      <param name="expandMinSize">最小扩展长度</param>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.MaxSize">
      <summary>
            读取或设置最大缓存大小。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.TSize">
      <summary>
            获取 T 的 Size。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.Context">
      <summary>
            获取数组。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.Address">
      <summary>
            全局字符串内存地址。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.Pointer">
      <summary>
            全局字符串内存地址。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.Item(System.Int32)">
      <summary>
            获取指定位置的 T 元素。
            </summary>
      <param name="index">指定位置</param>
      <returns>返回 T 值</returns>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.Capacity">
      <summary>
            T 元素数量。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.First">
      <summary>
            首个 T 元素引用。
            </summary>
    </member>
    <member name="P:Swifter.Tools.HGlobalCache`1.ByteCount">
      <summary>
            总 Byte 数量。
            </summary>
    </member>
    <member name="T:Swifter.Tools.HGlobalCacheExtensions">
      <summary>
            HGlobalCache 扩展方法。
            </summary>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextWriter)">
      <summary>
            异步将缓存中内容写入到指定的文本写入器中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="textWriter">文本写入器</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
      <summary>
            异步将缓存中内容写入到指定的流中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">流</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextReader)">
      <summary>
            异步将 TextReader 的内容缓冲到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="textReader">TextReader</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
      <summary>
            异步将 Stream 的内容缓冲到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">Stream</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteToAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
      <summary>
            异步将 HGlobalCache 中的内容写入到流中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">流</param>
      <param name="encoding">编码</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFromAsync(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
      <summary>
            异步将 Stream 的内容缓存到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">Stream</param>
      <param name="encoding">编码</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
      <summary>
            将 HGlobalCache 中的内容写入到流中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">流</param>
      <param name="encoding">编码</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.IO.Stream,System.Text.Encoding)">
      <summary>
            将 Stream 的内容缓存到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">Stream</param>
      <param name="encoding">编码</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
      <summary>
            将 HGlobalCache 中的内容写入到 destination 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="destination">destination</param>
      <param name="encoding">编码</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},Swifter.Tools.HGlobalCache{System.Byte},System.Text.Encoding)">
      <summary>
            将 source 的内容缓存到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="source">source</param>
      <param name="encoding">编码</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.ArraySegment{System.Byte},System.Text.Encoding)">
      <summary>
            将 source 的内容缓存到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="source">source</param>
      <param name="encoding">编码</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.GetPointer(Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            获取 HGlobalCache&lt;byte&gt; 的 Byte 指针。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <returns>返回 Byte 指针</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.GetPointer(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            获取 HGlobalCache&lt;char&gt; 的 Char 指针。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <returns>返回 Char 指针</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToBytes(Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            将缓存中的内容复制到新的数组中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToBytes(Swifter.Tools.HGlobalCache{System.Char},System.Text.Encoding)">
      <summary>
            将缓存中的内容复制到新的数组中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="encoding">编码</param>
      <returns>返回一个新的数组</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ToStringEx(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将缓存中的内容复制到新的字符串中。(Ex: 避免冲突)
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <returns>返回一个新的字符串</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextWriter)">
      <summary>
            将缓存中内容写入到指定的文本写入器中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="textWriter">文本写入器</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.WriteTo(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
      <summary>
            将缓存中内容写入到指定的流中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">流</param>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Char},System.IO.TextReader)">
      <summary>
            缓冲 TextReader 的内容到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="textReader">TextReader</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ReadFrom(Swifter.Tools.HGlobalCache{System.Byte},System.IO.Stream)">
      <summary>
            缓冲 Stream 的内容到 HGlobalCache 中。
            </summary>
      <param name="hGCache">HGlobalCache</param>
      <param name="stream">Stream</param>
      <returns>返回缓冲的长度</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            使用指定哈希算法类型计算字节缓存的哈希值。以十六进制字符串返回。
            </summary>
      <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
      <param name="hGCache">字节缓存</param>
      <returns>返回 Hash 值的十六进制字符串</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Char},System.Text.Encoding)">
      <summary>
            使用指定哈希算法类型和编码类型计算字符缓存的哈希值。以十六进制字符串返回。
            </summary>
      <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
      <param name="hGCache">字符缓存</param>
      <param name="encoding">指定编码</param>
      <returns>返回 Hash 值的十六进制字符串</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.ComputeHash``1(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            使用指定哈希算法类型并使用 UTF-8 编码计算字符缓存的哈希值。以十六进制字符串返回。
            </summary>
      <typeparam name="THashAlgorithm">哈希算法类型</typeparam>
      <param name="hGCache">字符缓存</param>
      <returns>返回 Hash 值的十六进制字符串</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.Append(Swifter.Tools.HGlobalCache{System.Char},System.String)">
      <summary>
            在字符缓存的后面拼接一个字符串。
            </summary>
      <param name="hGCache">字符缓存</param>
      <param name="value">字符串</param>
      <returns>返回当前字符缓存</returns>
    </member>
    <member name="M:Swifter.Tools.HGlobalCacheExtensions.Clear``1(Swifter.Tools.HGlobalCache{``0})">
      <summary>
            清楚缓存中的内容
            </summary>
      <param name="hGCache">缓存</param>
    </member>
    <member name="T:Swifter.Tools.IdCache`1">
      <summary>
            提供 Int64 为 Id 的缓存类。
            </summary>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.IdCache`1.#ctor">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
    </member>
    <member name="M:Swifter.Tools.IdCache`1.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.IdCache`1.ComputeHashCode(System.Int64)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.IdCache`1.Equals(System.Int64,System.Int64)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.IntPtrCache`1">
      <summary>
            提供 IntPtr 为 Id 的缓存类。
            </summary>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.IntPtrCache`1.#ctor">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
    </member>
    <member name="M:Swifter.Tools.IntPtrCache`1.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.IntPtrCache`1.ComputeHashCode(System.IntPtr)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.IntPtrCache`1.Equals(System.IntPtr,System.IntPtr)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.NameCache`1">
      <summary>
            提供 String 为 Id 的缓存类。
            </summary>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.NameCache`1.#ctor">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
    </member>
    <member name="M:Swifter.Tools.NameCache`1.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.NameCache`1.ComputeHashCode(System.String)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.NameCache`1.Equals(System.String,System.String)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.ReferenceCache`1">
      <summary>
            提供对象引用为 Key 的缓存类。
            </summary>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.ReferenceCache`1.#ctor">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
    </member>
    <member name="M:Swifter.Tools.ReferenceCache`1.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.ReferenceCache`1.ComputeHashCode(System.Object)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.ReferenceCache`1.Equals(System.Object,System.Object)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.TypeCache`1">
      <summary>
            提供 Type 为键的缓存类。
            </summary>
      <typeparam name="TValue">值的类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.TypeCache`1.#ctor">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
    </member>
    <member name="M:Swifter.Tools.TypeCache`1.#ctor(System.Int32)">
      <summary>
            初始化高效读取的缓存字典。
            </summary>
      <param name="capacity">初始容量</param>
    </member>
    <member name="M:Swifter.Tools.TypeCache`1.ComputeHashCode(System.Type)">
      <summary>
            计算缓存键的 HashCode。
            </summary>
      <param name="key">缓存键</param>
      <returns>返回 HashCode</returns>
    </member>
    <member name="M:Swifter.Tools.TypeCache`1.Equals(System.Type,System.Type)">
      <summary>
            比较两个缓存键是否相等。
            </summary>
      <param name="key1">缓存键 1</param>
      <param name="key2">缓存键 2</param>
      <returns>返回是否相等</returns>
    </member>
    <member name="T:Swifter.Tools.StringHelper">
      <summary>
            字符串辅助类
            </summary>
    </member>
    <member name="F:Swifter.Tools.StringHelper.Mult">
      <summary>
            HashCode 的乘数。
            </summary>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Reverse(System.String)">
      <summary>
            颠倒字符串内容。
            </summary>
      <param name="text">字符串</param>
      <returns>返回一个新的字符串</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetUpperedHashCode(System.Char*,System.Int32)">
      <summary>
            获取字符串大写形式的 Hash 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetLoweredHashCode(System.Char*,System.Int32)">
      <summary>
            获取字符串小写形式的 Hash 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetUpperedHashCode(System.Byte*,System.Int32)">
      <summary>
            获取字符串大写形式的 Hash 值。
            </summary>
      <param name="bytes">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetLoweredHashCode(System.Byte*,System.Int32)">
      <summary>
            获取字符串小写形式的 Hash 值。
            </summary>
      <param name="bytes">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetHashCode(System.Byte*,System.Int32)">
      <summary>
            获取 UTF8 字符串的 Hash 值。
            </summary>
      <param name="bytes">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetHashCode(System.Char*,System.Int32)">
      <summary>
            获取字符串的 Hash 值。
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <returns>返回 Hash 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetUpperedHashCode(System.String)">
      <summary>
            忽略大小写获取字符串 Hash 值。
            </summary>
      <param name="st">字符串。</param>
      <returns>返回一个 int hash 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetLoweredHashCode(System.String)">
      <summary>
            忽略大小写获取字符串 Hash 值。
            </summary>
      <param name="st">字符串。</param>
      <returns>返回一个 int hash 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetHashCode(System.String)">
      <summary>
            获取字符串 Hash 值。
            </summary>
      <param name="st">字符串。</param>
      <returns>返回一个 int hash 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Equals(System.String,System.String)">
      <summary>
            匹配两个字符串。
            </summary>
      <param name="st1">字符串 1</param>
      <param name="st2">字符串 2</param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByUpper(System.String,System.String)">
      <summary>
            忽略大小写匹配两个字符串。请确保字符串 2 是已大写的。
            </summary>
      <param name="st1">字符串 1</param>
      <param name="st2">字符串 2</param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByLower(System.String,System.String)">
      <summary>
            忽略大小写匹配两个字符串。
            </summary>
      <param name="st1">字符串 1</param>
      <param name="st2">字符串 2</param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Equals(System.Byte*,System.Int32,System.String)">
      <summary>
            比较两个字符串。
            </summary>
      <param name="bytes">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="str">字符串 2</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetUtf8Char(System.Byte*,System.Int32@)">
      <summary>
            获取 UTF8 编码的字符。
            </summary>
      <param name="bytes">UTF8 字节内容</param>
      <param name="index">索引</param>
      <returns>返回一个 Unicode 字符</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetUtf8String(System.Byte*,System.Int32)">
      <summary>
            获取 Utf8 字符串。
            </summary>
      <param name="bytes">字节内容</param>
      <param name="length">字节长度</param>
      <returns>返回一个字符串</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Equals(System.Char*,System.Int32,System.String)">
      <summary>
            比较两个字符串。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="str">字符串 2</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByUpper(System.Char*,System.Int32,System.String)">
      <summary>
            忽略大小写比较两个字符串。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="upperedStr">字符串 2，要求已全部大写</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByLower(System.Char*,System.Int32,System.String)">
      <summary>
            忽略大小写比较两个字符串。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="loweredStr">字符串 2，要求已全部小写</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByUpper(System.Byte*,System.Int32,System.String)">
      <summary>
            比较两个字符串。
            </summary>
      <param name="bytes">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="upperedStr">字符串 2，要求已全部大写</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IgnoreCaseEqualsByLower(System.Byte*,System.Int32,System.String)">
      <summary>
            比较两个字符串。
            </summary>
      <param name="bytes">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="loweredStr">字符串 2，要求已全部小写</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.UpperCharAt(System.String,System.Int32)">
      <summary>
            获取字符串指定索引处字符的大写形式。
            </summary>
      <param name="st">字符串</param>
      <param name="index">索引</param>
      <returns>返回一个字符</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Trim(System.Char*,System.Int32)">
      <summary>
            去除字符串两端的空白字符，然后返回一个新的字符串。
            </summary>
      <param name="chars">原始字符串</param>
      <param name="length">原始长度</param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.TrimStart(System.Char*,System.Int32)">
      <summary>
            去除字符串头部的空白字符，然后返回一个新的字符串。
            </summary>
      <param name="chars">原始字符串</param>
      <param name="length">原始长度</param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.TrimEnd(System.Char*,System.Int32)">
      <summary>
            去除字符串尾部的空白字符，然后返回一个新的字符串。
            </summary>
      <param name="chars">原始字符串</param>
      <param name="length">原始长度</param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.Format``1(System.String,``0)">
      <summary>
            将字符串中的格式项 ({Index})替换为对象中相应的属性。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="text">字符串</param>
      <param name="args">对象</param>
      <returns>返回一个新的字符串。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.StartWith(System.Char*,System.Int32,System.String)">
      <summary>
            比较两个字符串是否相同。如果字符串 1 比字符串 2 长，但两个字符串前面的内容相同也返回 true。如果字符串 1 比字符串 2 短则直接返回 false。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="str">字符串 2 </param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.StartWithByUpper(System.Char*,System.Int32,System.String)">
      <summary>
            比较两个字符串是否相同，忽略英文字符大小写。如果字符串 1 比字符串 2 长，但两个字符串前面的内容相同也返回 true。如果字符串 1 比字符串 2 短则直接返回 false。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="upperStr">字符串 2 </param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.StartWithByLower(System.Char*,System.Int32,System.String)">
      <summary>
            比较两个字符串是否相同，忽略英文字符大小写。如果字符串 1 比字符串 2 长，但两个字符串前面的内容相同也返回 true。如果字符串 1 比字符串 2 短则直接返回 false。
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="lowerstr">字符串 2</param>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.ToUpper(System.Char)">
      <summary>
            将小写英文字符转为大写英文字符。
            </summary>
      <param name="c">
      </param>
      <returns>返回一个字符。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.ToLower(System.Char)">
      <summary>
            将大写英文字符转为小写英文字符。
            </summary>
      <param name="c">
      </param>
      <returns>返回一个字符。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.ToUpper(System.String)">
      <summary>
            将字符串中的小写字符转换为大写字符。
            </summary>
      <param name="str">字符串</param>
      <returns>返回一个新的字符串</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.ToLower(System.String)">
      <summary>
            将字符串中的大写字符转换为小写字符。
            </summary>
      <param name="str">字符串</param>
      <returns>返回一个新的字符串</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.MakeString(System.Int32)">
      <summary>
            快速分配指定长度的字符串。
            </summary>
      <param name="length">指定长度</param>
      <returns>返回一个字符串</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IsWhiteSpace(System.Char)">
      <summary>
            判断一个字符是否为空白字符
            </summary>
      <param name="c">字符</param>
      <returns>返回一个 Boolean 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IndexOf(System.Char*,System.Int32,System.Char)">
      <summary>
            在字符串中找到指定字符的索引，没找到则返回 -1
            </summary>
      <param name="chars">字符串</param>
      <param name="c">字符</param>
      <param name="length">字符串长度</param>
      <returns>返回一个 int 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IndexOf(System.Char*,System.Int32,System.Char,System.Char)">
      <summary>
            在字符串中找到第一个字符 1 或字符 2 的索引，两个字符都没找到则返回 -1
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="item1">字符 1</param>
      <param name="item2">字符 2</param>
      <returns>返回一个 int 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IndexOf(System.Char*,System.Int32,System.String)">
      <summary>
            在字符串 1 中找到字符串 2 的索引，没找到则返回 -1
            </summary>
      <param name="chars">字符串 1</param>
      <param name="length">字符串 1 长度</param>
      <param name="str">字符串 2</param>
      <returns>返回一个 int 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.IndexOf(System.Char*,System.Int32,System.Char[])">
      <summary>
            在字符串中找到字符集合中第一个出现的索引，没找到则返回 -1
            </summary>
      <param name="chars">字符串</param>
      <param name="length">字符串长度</param>
      <param name="items">字符集合</param>
      <returns>返回一个 int 值。</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.GetRawStringData(System.String)">
      <summary>
            获取字符串的元数据引用。
            </summary>
      <param name="str">字符串</param>
      <returns>返回第一个字符的引用</returns>
    </member>
    <member name="M:Swifter.Tools.StringHelper.ToString(System.Char*,System.Int32)">
      <summary>
            创建一个字符串。
            </summary>
      <param name="chars">字符串内容</param>
      <param name="length">字符串长度</param>
      <returns>返回一个新的字符串</returns>
    </member>
    <member name="T:Swifter.Tools.Utf8Byte">
      <summary>
            表示 UTF8 专用字节标识。
            </summary>
    </member>
    <member name="T:Swifter.Tools.DynamicAssembly">
      <summary>
            Swifter 内部动态程序集。
            </summary>
    </member>
    <member name="M:Swifter.Tools.DynamicAssembly.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>
            定义一个动态类型。
            </summary>
      <param name="name">类型名称</param>
      <param name="attributes">类型属性</param>
      <param name="baseType">基类</param>
      <returns>返回一个类型生成器</returns>
    </member>
    <member name="T:Swifter.Tools.EmitHelper">
      <summary>
            提供 Emit 帮助方法。
            </summary>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary>
            加载字段值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="fieldInfo">字段信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.StoreField(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary>
            设置实例字段值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="fieldInfo">字段信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
      <summary>
            加载字段地址。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="fieldInfo">字段信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadToken(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            加载类型的元数据元素。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadType(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            加载类型 Type 到栈顶。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary>
            加载本地变量值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="localBuilder">变量信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.StoreLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary>
            设置本地变量值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="localBuilder">本地变量信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadLocalAddress(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder)">
      <summary>
            加载本地变量地址。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="localBuilder">变量信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
            加载 Int32 常量。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadConstant(System.Reflection.Emit.ILGenerator,System.Int64)">
      <summary>
            加载 Int64 常量。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadString(System.Reflection.Emit.ILGenerator,System.String)">
      <summary>
            加载 String 常量。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.StoreValue(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            设置类型已提供的值到提供的内存上。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">值的类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadValue(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            在提供的内存上加载一个类型的值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">值的类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
            加载参数值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="index">参数序号</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.StoreArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
            设置参数值。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="index">参数序号</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadArgumentAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
      <summary>
            加载参数地址。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="index">参数序号</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadElementAddress(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            加载提供的数组位于提供索引出的元素的地址。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="elementType">元素的类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadReferenceElement(System.Reflection.Emit.ILGenerator)">
      <summary>
            加载引用类型元素数组的元素。
            </summary>
      <param name="ilGen">
      </param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.SizeOf(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            加载类型值的大小。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LoadNull(System.Reflection.Emit.ILGenerator)">
      <summary>
            加载一个 Null 值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchFalse(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当提供的值为 False 时跳到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchTrue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当提供的值为 True 时跳到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Branch(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            无条件跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchIfLess(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当栈顶第一个值小于第二个值时跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchIfLessOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当栈顶第一个值小于或等于第二个值时跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchIfEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当栈顶第一个值等于第二个值时跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchIfGreater(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当栈顶第一个值大于第二个值时跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchIfGreaterOrEqual(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.Label)">
      <summary>
            当栈顶第一个值大于或等于第二个值时跳转到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Box(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            将当前值类型转换为对象引用 (类型 O)。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">值类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.UnboxAny(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            将指令中指定类型的已装箱的表示形式转换成未装箱形式。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            将值类型的已装箱的表示形式转换为其未装箱的形式。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.CastClass(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            将栈顶的值尝试转化为指定的类型。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.NewObject(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
      <summary>
            创建一个新的对象或值类型，并将对象引用的新实例 (类型 O) 到计算堆栈上。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="constructor">对象的构造函数</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.BranchDefaultValue(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.Label)">
      <summary>
            当指定的本地变量值为该类型的默认值时跳到指定块。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="local">本地变量</param>
      <param name="label">代码块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodBase)">
      <summary>
            调用方法。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="methodBase">方法信息</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ConvertPointer(System.Reflection.Emit.ILGenerator)">
      <summary>
            将值转换为指针类型。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ConvertInt32(System.Reflection.Emit.ILGenerator)">
      <summary>
            将值转换为 Int32 类型。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ConvertInt16(System.Reflection.Emit.ILGenerator)">
      <summary>
            将值转换为 Int16 类型。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ConvertInt64(System.Reflection.Emit.ILGenerator)">
      <summary>
            将值转换为 Int64 类型。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Add(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 加法运算，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Subtract(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 减法运算，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Multiply(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 乘法运算，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Division(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 除法运算，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Rem(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 求余运算，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Xor(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 按位异或，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Or(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 按位或，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.And(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 按位与，返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ShiftLeft(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 左移。返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ShiftRight(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 右移。返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.UnsignedShiftRight(System.Reflection.Emit.ILGenerator)">
      <summary>
            对栈顶的两个值进行 无符号右移。返回一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Throw(System.Reflection.Emit.ILGenerator)">
      <summary>
            抛出位于栈顶的异常。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Pop(System.Reflection.Emit.ILGenerator)">
      <summary>
            移除位于栈顶的一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Duplicate(System.Reflection.Emit.ILGenerator)">
      <summary>
            复制位于栈顶的一个值。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.IsInstance(System.Reflection.Emit.ILGenerator,System.Type)">
      <summary>
            判断栈顶的对象是否为指定类型的实例，如果为是则返回该实例。如果为否则为返回 Null。
            </summary>
      <param name="ilGen">ilGen</param>
      <param name="type">指定类型</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.LocalAllocate(System.Reflection.Emit.ILGenerator)">
      <summary>
            分配本地内存。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Return(System.Reflection.Emit.ILGenerator)">
      <summary>
            方法返回。
            </summary>
      <param name="ilGen">ilGen</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.DefineAutoProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
      <summary>
            定义自动完成的属性。
            </summary>
      <param name="typeBuilder">类型生成器</param>
      <param name="name">属性的名称</param>
      <param name="type">属性的类型</param>
      <returns>返回一个属性生成器</returns>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.ToCustomAttributeBuilder``1(``0)">
      <summary>
            将特性转换为特性生成器。
            </summary>
      <typeparam name="TAttribute">特性类型</typeparam>
      <param name="attribute">特性实例</param>
      <returns>返回一个将特性转换为特性生成器</returns>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.String}[],System.Reflection.Emit.Label,System.Boolean)">
      <summary>
            生成 Switch(String) 代码块。
            </summary>
      <param name="iLGen">ILGenerator IL 指令生成器</param>
      <param name="emitLdcValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
      <param name="ignoreCase">是否忽略大小写</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.HashSwitch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.String}[],System.Reflection.Emit.Label,System.Boolean)">
      <summary>
            生成 Switch(String) 代码块。
            </summary>
      <param name="iLGen">ILGenerator IL 指令生成器</param>
      <param name="emitLdcValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
      <param name="ignoreCase">是否忽略大小写</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.Int32}[],System.Reflection.Emit.Label)">
      <summary>
            生成 Switch(int) 代码块。
            </summary>
      <param name="ILGen">ILGenerator IL 指令生成器</param>
      <param name="ldValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.IntPtr}[],System.Reflection.Emit.Label)">
      <summary>
            生成 Switch(int) 代码块。
            </summary>
      <param name="ILGen">ILGenerator IL 指令生成器</param>
      <param name="loadValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Switch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.Int64}[],System.Reflection.Emit.Label)">
      <summary>
            生成 Switch(long) 代码块。
            </summary>
      <param name="ILGen">ILGenerator IL 指令生成器</param>
      <param name="loadValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.DifferenceSwitch(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},Swifter.Tools.CaseInfo{System.String}[],System.Reflection.Emit.Label,System.Boolean)">
      <summary>
            生成 Switch(String) 代码块。字符串差异位置比较，通常情况下这比 Hash 比较要快。
            </summary>
      <param name="ilGen">ILGenerator IL 指令生成器</param>
      <param name="loadValue">生成加载 Switch 参数的指令的委托</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
      <param name="ignoreCase">是否忽略大小写</param>
    </member>
    <member name="M:Swifter.Tools.EmitHelper.Switch``1(System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator},System.Reflection.MethodInfo,System.Reflection.MethodInfo,Swifter.Tools.CaseInfo{``0}[],System.Reflection.Emit.Label,System.Action{System.Reflection.Emit.ILGenerator,``0})">
      <summary>
            生成指定类型的 Switch 代码块。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="ilGen">ILGenerator IL 指令生成器</param>
      <param name="ldValue">生成加载 Switch 参数的指令的委托</param>
      <param name="getHashCodeMethod">获取 HashCode 值的方法，参数签名: int(T)</param>
      <param name="equalsMethod">比例两个值的方法，参数签名: bool (T, T)</param>
      <param name="cases">case 标签块集合</param>
      <param name="defaultLabel">默认标签块</param>
      <param name="ldCaseValue">生成加载指定 Case 块值的指定的委托</param>
    </member>
    <member name="T:Swifter.Tools.CaseInfo`1">
      <summary>
            表示 Switch 的 Case 块
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Swifter.Tools.CaseInfo`1.Value">
      <summary>
            获取 Case 块的值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.CaseInfo`1.Label">
      <summary>
            获取 Case 块的指令标签。
            </summary>
    </member>
    <member name="F:Swifter.Tools.CaseInfo`1.HashCode">
      <summary>
            获取或设置值的 HashCode 值。
            </summary>
    </member>
    <member name="F:Swifter.Tools.CaseInfo`1.Tag">
      <summary>
            辅助变量。
            </summary>
    </member>
    <member name="M:Swifter.Tools.CaseInfo`1.#ctor(`0,System.Reflection.Emit.Label)">
      <summary>
            实例化 Case 块。
            </summary>
      <param name="Value">Case 块的值</param>
      <param name="Label">ase 块的指令标签</param>
    </member>
    <member name="M:Swifter.Tools.CaseInfo`1.CompareTo(Swifter.Tools.CaseInfo{`0})">
      <summary>
            与另一个 Case 块信息比较 HashCode 的大小。
            </summary>
      <param name="other">Case 块信息</param>
      <returns>返回大于 0 则比它大，小于 0 则比它小，否则一样大</returns>
    </member>
    <member name="T:Swifter.Tools.IGenericInvoker">
      <summary>
            表示一个泛型执行器。
            </summary>
    </member>
    <member name="M:Swifter.Tools.IGenericInvoker.Invoke``1">
      <summary>
            泛型执行方法。
            </summary>
      <typeparam name="TKey">泛型</typeparam>
    </member>
    <member name="T:Swifter.Tools.IGenericInvoker`1">
      <summary>
            带返回值的泛型执行器。
            </summary>
      <typeparam name="TResult">返回值类型</typeparam>
    </member>
    <member name="M:Swifter.Tools.IGenericInvoker`1.Invoke``1">
      <summary>
            泛型执行方法。
            </summary>
      <typeparam name="TKey">泛型</typeparam>
      <returns>返回一个泛型值</returns>
    </member>
    <member name="T:Swifter.Tools.OverlappedPointer">
      <summary>
            一个重叠的指针类型集合。
            </summary>
    </member>
    <member name="T:Swifter.Tools.OverlappedValue">
      <summary>
            一个重叠的基础类型集合。
            </summary>
    </member>
    <member name="T:Swifter.Tools.TypeHelper">
      <summary>
            提供类型信息的一些方法。
            </summary>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.OffsetOf(System.Reflection.FieldInfo)">
      <summary>
            获取一个字段的偏移量。如果是 Class 的字段则不包括 ObjectHandle 的大小。
            </summary>
      <param name="fieldInfo">字段信息</param>
      <returns>返回偏移量</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.SizeOf(System.Type)">
      <summary>
            获取一个类型占用的内存大小。如果是 Class 则不包括 ObjectHandle 的大小。
            </summary>
      <param name="type">类型信息</param>
      <returns>返回内存大小。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.Clone``1(``0)">
      <summary>
            克隆一个值或对象。
            </summary>
      <typeparam name="T">值或对象的类型</typeparam>
      <param name="obj">值或对象</param>
      <returns>返回一个新的值或对象</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.Allocate(System.Type)">
      <summary>
            分配一个类型的实例。
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.CanBeGenericParameter(System.Type)">
      <summary>
            判断一个类型能否作为泛型参数。
            </summary>
      <param name="type">类型</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetObjectTypeHandle(System.Object)">
      <summary>
            获取实例的 ObjectHandle 值。
            </summary>
      <param name="obj">实例</param>
      <returns>返回 ObjectHandle 值。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetTypeHandle(System.Object)">
      <summary>
            获取实例的 TypeHandle 值。
            </summary>
      <param name="obj">实例</param>
      <returns>返回 ObjectHandle 值。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetTypeHandle(System.Type)">
      <summary>
            获取类型的 TypeHandle 值。
            </summary>
      <param name="type">类型信息</param>
      <returns>返回 TypeHandle 值。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetObjectTypeHandle(System.Type)">
      <summary>
            获取类型的 ObjectHandle 值。
            </summary>
      <param name="type">类型信息</param>
      <returns>返回 ObjectHandle 值。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetTypeStaticMemoryAddress(System.Type)">
      <summary>
            获取类型的静态字段存储内存的地址。
            </summary>
      <param name="type">类型信息</param>
      <returns>返回内存地址。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.IsEmptyValue``1(``0)">
      <summary>
            判断一个值是否为空。
            </summary>
      <typeparam name="T">值的类型</typeparam>
      <param name="value">值</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.IsEmptyValue(System.Object)">
      <summary>
            判断一个值是否是空。
            </summary>
      <param name="value">值</param>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetProperty(System.Type,System.Type[])">
      <summary>
            获取指定 Type 的特定索引。
            </summary>
      <param name="type">指定 Type</param>
      <param name="types">指定索引的参数</param>
      <returns>返回索引信息</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.ParametersCompares(System.Type[],System.Object[])">
      <summary>
            比较参数类型集合和参数集合是否兼容。
            </summary>
      <param name="parametersTypes">参数类型集合。</param>
      <param name="inputParameters">参数集合。</param>
      <returns>返回兼容或不兼容。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.ParametersCompares(System.Type[],System.Type[])">
      <summary>
            比较两个参数类型集合是否一致。
            </summary>
      <param name="parametersTypes">参数类型集合。</param>
      <param name="inputParameters">参数类型集合。</param>
      <returns>返回一致或不一致。</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.SlowGetValue``1(System.Type,System.String)">
      <summary>
            使用反射获取指定静态成员的值。
            </summary>
      <typeparam name="T">成员类型</typeparam>
      <param name="type">定义该成员的类</param>
      <param name="staticMemberName">成员名称</param>
      <returns>返回该静态成员的值</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.SlowGetValue``1(System.Object,System.String)">
      <summary>
            使用反射获取指定实例成员的值。
            </summary>
      <typeparam name="T">成员类型</typeparam>
      <param name="instance">定义该成员的对象</param>
      <param name="memberName">成员名称</param>
      <returns>返回该实例成员的值</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.Unbox``1(System.Object)">
      <summary>
            获取已装箱值类型的引用。
            </summary>
      <typeparam name="T">引用的类型</typeparam>
      <param name="value">已装箱值</param>
      <returns>返回结构的引用</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetDefinedAttributes``1(System.Type,System.Boolean)">
      <summary>
            获取类型已定义的指定类型的特性集合，没有则空数组。
            </summary>
      <typeparam name="TAttribute">特性类型</typeparam>
      <param name="type">需要查找的类型</param>
      <param name="inherit">是否查询类型的父级，直到 object。</param>
      <returns>返回特性数组</returns>
    </member>
    <member name="M:Swifter.Tools.TypeHelper.GetTypes(System.String)">
      <summary>
            获取指定完全名称的类型信息集合。
            </summary>
      <param name="fullName">指定类型名称</param>
      <returns>返回一个类型集合</returns>
    </member>
    <member name="T:Swifter.RW.DataRowRW`1">
      <summary>
            System.Data.DataRow Reader impl.
            </summary>
    </member>
    <member name="T:Swifter.RW.DataSetRW`1">
      <summary>
            System.Data.DataSet Reader impl.
            </summary>
    </member>
    <member name="T:Swifter.RW.DataTableRW`1">
      <summary>
            System.Data.DataTable Reader impl.
            </summary>
    </member>
    <member name="T:Swifter.RW.DataTableRWOptions">
      <summary>
            DataTable 读写器的配置。
            </summary>
    </member>
    <member name="F:Swifter.RW.DataTableRWOptions.None">
      <summary>
            默认配置项。
            </summary>
    </member>
    <member name="F:Swifter.RW.DataTableRWOptions.SetFirstRowsTypeToColumnTypes">
      <summary>
            设置第一行的数据类型为各个 Column 的类型。否则将设置 Object 为各个 Column 的类型。默认不开启。
            </summary>
    </member>
    <member name="F:Swifter.RW.DataTableRWOptions.WriteToArrayFromBeginningSecondRows">
      <summary>
            设置第二行开始的数据写入为数组。
            </summary>
    </member>
    <member name="T:Swifter.RW.DataTableRW">
      <summary>
            提供 DataTable 读写器的扩展方法。
            </summary>
    </member>
    <member name="M:Swifter.RW.DataTableRW.SetDataTableRWOptions(Swifter.RW.ITargetedBind,Swifter.RW.DataTableRWOptions)">
      <summary>
            设置一个支持针对性接口的 DataTableRW 默认配置项。
            </summary>
      <param name="targeted">支持针对性接口的对象</param>
      <param name="options">默认配置项</param>
    </member>
    <member name="M:Swifter.RW.DataTableRW.GetDataTableRWOptions(Swifter.RW.ITargetedBind)">
      <summary>
            获取一个支持针对性接口的 DataTableRW 默认配置项。
            </summary>
      <param name="targeted">支持针对性接口的对象</param>
      <returns>默认配置项</returns>
    </member>
    <member name="P:Swifter.RW.DataTableRW.DefaultOptions">
      <summary>
            读取或设置 DataTableRW 默认配置项
            </summary>
    </member>
    <member name="T:Swifter.RW.DbDataReaderReader">
      <summary>
            重写数据库读取器，使它成为表格读取器。
            </summary>
    </member>
    <member name="F:Swifter.RW.DbDataReaderReader.dbDataReader">
      <summary>
            数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.DbDataReaderReader.#ctor(System.Data.IDataReader,Swifter.RW.DataTableRWOptions)">
      <summary>
            初始化数据读取器。
            </summary>
      <param name="dbDataReader">数据源</param>
      <param name="options">配置项</param>
    </member>
    <member name="M:Swifter.RW.DbDataReaderReader.OnReadAll(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取所有值当前行的所有值，然后写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.DbDataReaderReader.OnReadValue(System.Int32,Swifter.RW.IValueWriter)">
      <summary>
            读取指定位置的值，然后写入到值写入器中。
            </summary>
      <param name="key">指定位置</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.DbDataReaderReader.OnReadAll(Swifter.RW.IDataWriter{System.Int32},Swifter.RW.IValueFilter{System.Int32})">
      <summary>
            读取当前行的所有数据并进行筛选，然后将筛选结果写入器数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">值筛选器</param>
    </member>
    <member name="P:Swifter.RW.DbDataReaderReader.Item(System.Int32)">
      <summary>
            获取位于指定索引处的值读取器。
            </summary>
      <param name="key">指定索引</param>
      <returns>返回值读取器</returns>
    </member>
    <member name="P:Swifter.RW.DbDataReaderReader.Count">
      <summary>
            获取表格列的数量。
            </summary>
    </member>
    <member name="P:Swifter.RW.DbDataReaderReader.Keys">
      <summary>
            获取表格列的名称集合。
            </summary>
    </member>
    <member name="P:Swifter.RW.DbDataReaderReader.ReferenceToken">
      <summary>
            获取数据源的 Id。
            </summary>
    </member>
    <member name="T:Swifter.RW.FastObjectRW`1">
      <summary>
            FastObjectRW 基于 Emit 实现的几乎完美效率的对象读写器。
            </summary>
      <typeparam name="T">数据源对象的类型</typeparam>
    </member>
    <member name="T:Swifter.RW.FastObjectRW`1.FastFieldRW">
      <summary>
            字段值读写器。
            </summary>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadBoolean">
      <summary>
            读取一个 Boolean 值。
            </summary>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadByte">
      <summary>
            读取一个 Byte 值。
            </summary>
      <returns>返回一个 byte 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadChar">
      <summary>
            读取一个 Char 值。
            </summary>
      <returns>返回一个 char 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadDateTime">
      <summary>
            读取一个 DateTime 值。
            </summary>
      <returns>返回一个 DateTime 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadDecimal">
      <summary>
            读取一个 Decimal 值。
            </summary>
      <returns>返回一个 decimal 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.DirectRead">
      <summary>
            读取一个未知类型的值。
            </summary>
      <returns>返回一个未知类型的值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadDouble">
      <summary>
            读取一个 Double 值。
            </summary>
      <returns>返回一个 double 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadInt16">
      <summary>
            读取一个 Int16 值。
            </summary>
      <returns>返回一个 short 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadInt32">
      <summary>
            读取一个 Int32 值。
            </summary>
      <returns>返回一个 int 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadInt64">
      <summary>
            读取一个 Int64 值。
            </summary>
      <returns>返回一个 long 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadSByte">
      <summary>
            读取一个 SByte 值。
            </summary>
      <returns>返回一个 sbyte 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadSingle">
      <summary>
            读取一个 Single 值。
            </summary>
      <returns>返回一个 flaot 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadString">
      <summary>
            读取一个 String 值。
            </summary>
      <returns>返回一个 string 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadUInt16">
      <summary>
            读取一个 UInt16 值。
            </summary>
      <returns>返回一个 ushort 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadUInt32">
      <summary>
            读取一个 UInt32 值。
            </summary>
      <returns>返回一个 uint 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadUInt64">
      <summary>
            读取一个 UInt64 值。
            </summary>
      <returns>返回一个 ulong 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.ReadNullable``1">
      <summary>
            读取一个可空类型的值。
            </summary>
      <typeparam name="TValue">值类型</typeparam>
      <returns>返回 Null 或该值类型的值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值。
            </summary>
      <param name="value">byte 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值。
            </summary>
      <param name="value">char 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值。
            </summary>
      <param name="value">DateTime 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值。
            </summary>
      <param name="value">decimal 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.DirectWrite(System.Object)">
      <summary>
            写入一个未知类型的值。
            </summary>
      <param name="value">未知类型的值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值。
            </summary>
      <param name="value">double 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值。
            </summary>
      <param name="value">short 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值。
            </summary>
      <param name="value">int 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值。
            </summary>
      <param name="value">long 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值。
            </summary>
      <param name="value">sbyte 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteSingle(System.Single)">
      <summary>
            写入一个 Single 值。
            </summary>
      <param name="value">float 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteString(System.String)">
      <summary>
            写入一个 String 值。
            </summary>
      <param name="value">string 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值。
            </summary>
      <param name="value">ushort 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值。
            </summary>
      <param name="value">uint 值</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.FastFieldRW.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值。
            </summary>
      <param name="value">ulong 值</param>
    </member>
    <member name="F:Swifter.RW.FastObjectRW`1.content">
      <summary>
            数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.Create">
      <summary>
            创建 FastObjectRW 实例。
            </summary>
      <returns>返回 FastObjectRW 实例</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.GetValueInterfaceInstance(System.Int32)">
      <summary>
            获取指定索引处字段的值读写接口的实例。
            此方法供内部使用。
            </summary>
      <param name="index">索引</param>
      <returns>返回读写接口实例</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.Initialize">
      <summary>
            调用默认无参的构造函数初始化数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.Initialize(`0)">
      <summary>
            设置数据源。
            </summary>
      <param name="content">数据源</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.Initialize(System.Int32)">
      <summary>
            调用默认无参的构造函数初始化数据源。
            </summary>
      <param name="capacity">不使用此参数</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(System.String,Swifter.RW.IValueWriter)">
      <summary>
            将指定名称的成员的值写入到值写入器中。
            </summary>
      <param name="key">指定名称</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(System.String,Swifter.RW.IValueReader)">
      <summary>
            将值读取器中的值写入到指定名称的成员中。
            </summary>
      <param name="key">指定名称</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{System.String})">
      <summary>
            将数据源中的所有成员写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnWriteAll(Swifter.RW.IDataReader{System.String})">
      <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnReadAll(Swifter.RW.IDataWriter{System.String},Swifter.RW.IValueFilter{System.String})">
      <summary>
            对数据源中的所有成员进行筛选，并将满足筛选的结果写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">值筛选器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.ToString">
      <summary>
            获取该读写器的名称。
            </summary>
      <returns>返回该读写器的名称</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.GetId64(System.Char@,System.Int32)">
      <summary>
            获取字段名称的 Id64 值。
            </summary>
      <param name="firstSymbol">字段名称第一个字符的引用。</param>
      <param name="length">字段名称长度</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.GetId64(System.Collections.Generic.IEnumerable{System.Char})">
      <summary>
            获取字段名称的 Id64 值。
            </summary>
      <param name="symbols">字段名称</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.GetId64(Swifter.Tools.Utf8Byte@,System.Int32)">
      <summary>
            获取 UTF8 字段名称的 Id64 值。
            </summary>
      <param name="firstSymbol">字段名称第一个字符的引用。</param>
      <param name="length">字段名称长度</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.GetId64(System.Collections.Generic.IEnumerable{Swifter.Tools.Utf8Byte})">
      <summary>
            获取 UTF8 字段名称的 Id64 值。
            </summary>
      <param name="symbols">字段名称</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnReadValue(System.Int64,Swifter.RW.IValueWriter)">
      <summary>
            获取字段 Id64 值为键的值到值写入器中。
            </summary>
      <param name="id64">Id64 值</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.FastObjectRW`1.OnWriteValue(System.Int64,Swifter.RW.IValueReader)">
      <summary>
            从值读取器中读取值设置到字段 Id64 值为键的字段中。
            </summary>
      <param name="id64">Id64 值</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="P:Swifter.RW.FastObjectRW`1.CurrentOptions">
      <summary>
            读取或设置该类型的 FastObjectRWOptions 枚举配置项。
            如果该类型已经初始化完成，则无法设置该值，且发生异常。
            此属性不是高性能的，请不要多次读写。
            </summary>
    </member>
    <member name="P:Swifter.RW.FastObjectRW`1.Content">
      <summary>
            获取数据源。
            </summary>
    </member>
    <member name="P:Swifter.RW.FastObjectRW`1.Item(System.String)">
      <summary>
            获取指定名称的成员的值读写器。
            </summary>
      <param name="key">指定名称</param>
      <returns>返回值读写器</returns>
    </member>
    <member name="P:Swifter.RW.FastObjectRW`1.Keys">
      <summary>
            获取该类型所有的成员。
            </summary>
    </member>
    <member name="P:Swifter.RW.FastObjectRW`1.Count">
      <summary>
            获取该类型所有的成员的数量。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectInterface`1.CheckDerivedInstance">
      <summary>
            表示是否需要进行派生类检查。
            </summary>
    </member>
    <member name="T:Swifter.RW.FastObjectRW">
      <summary>
            FastObjectRW 基于 Emit 实现的几乎完美效率的对象读写器。
            </summary>
    </member>
    <member name="P:Swifter.RW.FastObjectRW.DefaultOptions">
      <summary>
            FastObjectRW 全局默认配置。
            </summary>
    </member>
    <member name="T:Swifter.RW.FastObjectRWOptions">
      <summary>
            FastObjectRW 初始化配置。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.IgnoreCase">
      <summary>
            忽略大小写。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.NotFoundException">
      <summary>
            字段未找到时发生异常。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.CannotGetException">
      <summary>
            不能读取时发生异常。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.CannotSetException">
      <summary>
            不能写入时发送异常。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.BasicTypeDirectCallMethod">
      <summary>
            基础类型直接调用方法读写，不经过 ValueInterface。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.Property">
      <summary>
            读写器包含属性。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.Field">
      <summary>
            读写器包含字段。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.InheritedMembers">
      <summary>
            读写器包含继承的成员。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.SkipDefaultValue">
      <summary>
            在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.MembersOptIn">
      <summary>
            在 OnReadAll 时只读取已定义 RWField(包括继承的类) 特性的成员。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.Allocate">
      <summary>
            在 Initialize 时，不调用构造方法初始化，而是直接从内存中分配这个对象的实例。
            </summary>
    </member>
    <member name="F:Swifter.RW.FastObjectRWOptions.IndexId64">
      <summary>
            表示 Id64 是一个索引，而不是 Hash64 值。
            </summary>
    </member>
    <member name="T:Swifter.RW.IFastObjectRWCreater`1">
      <summary>
            FastObjectRW 创建接口。
            此接口由 Emit 实现。
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Swifter.RW.IFastObjectRWCreater`1.Create">
      <summary>
            创建该类型的对象读写器。
            </summary>
      <returns>返回该类型</returns>
    </member>
    <member name="T:Swifter.RW.IAsDataReader">
      <summary>
            数据读取器键类型转换的接口。
            </summary>
    </member>
    <member name="M:Swifter.RW.IAsDataReader.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.IAsDataReader.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="P:Swifter.RW.IAsDataReader.Content">
      <summary>
            原始数据读取器。
            </summary>
    </member>
    <member name="T:Swifter.RW.AsDataReader`2">
      <summary>
            数据读取器键类型转换的类型。
            </summary>
      <typeparam name="TIn">输入类型</typeparam>
      <typeparam name="TOut">输出类型</typeparam>
    </member>
    <member name="F:Swifter.RW.AsDataReader`2.dataReader">
      <summary>
            原始数据读取器。
            </summary>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.#ctor(Swifter.RW.IDataReader{`0})">
      <summary>
            创建数据读取器键类型转换类的实例。
            </summary>
      <param name="dataReader">原始数据读取器</param>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.OnReadAll(Swifter.RW.IDataWriter{`1})">
      <summary>
            将数据中的所有转换后的键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.OnReadValue(`1,Swifter.RW.IValueWriter)">
      <summary>
            转换键，并将该键对应的值写入到值写入器中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.OnReadAll(Swifter.RW.IDataWriter{`1},Swifter.RW.IValueFilter{`1})">
      <summary>
            将数据中的所有转换后的键与值进行筛选，并将满足筛选的键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">键值筛选器</param>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.AsDataReader`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="P:Swifter.RW.AsDataReader`2.Item(`1)">
      <summary>
            转换键，并返回该键对应的值读取器。
            </summary>
      <param name="key">键</param>
      <returns>返回值读取器</returns>
    </member>
    <member name="P:Swifter.RW.AsDataReader`2.Keys">
      <summary>
            获取转换后的键集合。
            </summary>
    </member>
    <member name="P:Swifter.RW.AsDataReader`2.Count">
      <summary>
            获取数据源键的数量。
            </summary>
    </member>
    <member name="P:Swifter.RW.AsDataReader`2.ReferenceToken">
      <summary>
            获取原始数据读取器的数据源 Id。
            </summary>
    </member>
    <member name="T:Swifter.RW.IAsDataRW">
      <summary>
            数据读写器键类型转换的接口。
            </summary>
    </member>
    <member name="M:Swifter.RW.IAsDataRW.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.IAsDataRW.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="P:Swifter.RW.IAsDataRW.Content">
      <summary>
            原始数据读写器。
            </summary>
    </member>
    <member name="T:Swifter.RW.AsDataRW`2">
      <summary>
            数据读写器键类型转换的类型。
            </summary>
      <typeparam name="TIn">输入类型</typeparam>
      <typeparam name="TOut">输出类型</typeparam>
    </member>
    <member name="F:Swifter.RW.AsDataRW`2.dataRW">
      <summary>
            原始数据读写器。
            </summary>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.#ctor(Swifter.RW.IDataRW{`0})">
      <summary>
            创建数据读写器键类型转换类的实例。
            </summary>
      <param name="dataRW">原始数据读写器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.Initialize">
      <summary>
            初始化数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.Initialize(System.Int32)">
      <summary>
            初始化具有指定容量的数据源。
            </summary>
      <param name="capacity">指定容量</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.OnReadAll(Swifter.RW.IDataWriter{`1})">
      <summary>
            将数据中的所有转换后的键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.OnReadAll(Swifter.RW.IDataWriter{`1},Swifter.RW.IValueFilter{`1})">
      <summary>
            将数据中的所有转换后的键与值进行筛选，并将满足筛选的键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">键值筛选器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.OnReadValue(`1,Swifter.RW.IValueWriter)">
      <summary>
            转换键，并将该键对应的值写入到值写入器中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.OnWriteAll(Swifter.RW.IDataReader{`1})">
      <summary>
            将数据中的所有转换后的键从读取器中读取所有值写入到数据源中。
            </summary>
      <param name="dataReader">
      </param>
    </member>
    <member name="M:Swifter.RW.AsDataRW`2.OnWriteValue(`1,Swifter.RW.IValueReader)">
      <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="P:Swifter.RW.AsDataRW`2.Item(`1)">
      <summary>
            转换键，并返回该键对应的值读写器。
            </summary>
      <param name="key">键</param>
      <returns>返回值读写器</returns>
    </member>
    <member name="P:Swifter.RW.AsDataRW`2.Keys">
      <summary>
            获取转换后的键集合。
            </summary>
    </member>
    <member name="P:Swifter.RW.AsDataRW`2.Count">
      <summary>
            获取数据源键的数量。
            </summary>
    </member>
    <member name="P:Swifter.RW.AsDataRW`2.ReferenceToken">
      <summary>
            获取原始数据读取器的数据源 Id。
            </summary>
    </member>
    <member name="T:Swifter.RW.IAsDataWriter">
      <summary>
            数据写入器键类型转换的接口。
            </summary>
    </member>
    <member name="M:Swifter.RW.IAsDataWriter.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.IAsDataWriter.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="P:Swifter.RW.IAsDataWriter.Content">
      <summary>
            原始数据写入器。
            </summary>
    </member>
    <member name="T:Swifter.RW.AsDataWriter`2">
      <summary>
            数据写入器键类型转换的类型。
            </summary>
      <typeparam name="TIn">输入类型</typeparam>
      <typeparam name="TOut">输出类型</typeparam>
    </member>
    <member name="F:Swifter.RW.AsDataWriter`2.dataWriter">
      <summary>
            原始数据写入器。
            </summary>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.#ctor(Swifter.RW.IDataWriter{`0})">
      <summary>
            创建数据写入器键类型转换类的实例。
            </summary>
      <param name="dataWriter">原始数据写入器</param>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.Initialize">
      <summary>
            初始化数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.Initialize(System.Int32)">
      <summary>
            初始化具有指定容量的数据源。
            </summary>
      <param name="capacity">指定容量</param>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.InvokeTIn(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输入类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.InvokeTOut(Swifter.Tools.IGenericInvoker)">
      <summary>
            执行输出类型方法。
            </summary>
      <param name="invoker">泛型执行器</param>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.OnWriteValue(`1,Swifter.RW.IValueReader)">
      <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="M:Swifter.RW.AsDataWriter`2.OnWriteAll(Swifter.RW.IDataReader{`1})">
      <summary>
            从数据读取器中读取所有数据源字段到数据源的值。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="P:Swifter.RW.AsDataWriter`2.Item(`1)">
      <summary>
            转换键，并返回该键对应的值写入器。
            </summary>
      <param name="key">键</param>
      <returns>返回值写入器</returns>
    </member>
    <member name="P:Swifter.RW.AsDataWriter`2.Keys">
      <summary>
            获取转换后的键集合。
            </summary>
    </member>
    <member name="P:Swifter.RW.AsDataWriter`2.Count">
      <summary>
            获取数据源键的数量。
            </summary>
    </member>
    <member name="T:Swifter.RW.DataFilterWriter`1">
      <summary>
            数据筛选的辅助数据写入器。
            </summary>
      <typeparam name="TKey">
      </typeparam>
    </member>
    <member name="F:Swifter.RW.DataFilterWriter`1.ValueInfo">
      <summary>
            内部筛选器信息。
            </summary>
    </member>
    <member name="F:Swifter.RW.DataFilterWriter`1.DataWriter">
      <summary>
            内部写入器。
            </summary>
    </member>
    <member name="F:Swifter.RW.DataFilterWriter`1.ValueFilter">
      <summary>
            内部筛选器。
            </summary>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.#ctor(Swifter.RW.IDataWriter{`0},Swifter.RW.IValueFilter{`0})">
      <summary>
            初始化辅助数据写入器。
            </summary>
      <param name="dataWriter">原始数据写入器</param>
      <param name="valueFilter">数据筛选器</param>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.Initialize">
      <summary>
            初始化原始写入器。
            </summary>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.Initialize(System.Int32)">
      <summary>
            初始化具有指定容量的原始写入器。
            </summary>
      <param name="capacity">指定容量</param>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.OnWriteValue(`0,Swifter.RW.IValueReader)">
      <summary>
            从值读取器中读取一个值设置到原始写入器的指定键的值中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.OnFilter">
      <summary>
            当在筛选器时的处理函数。
            </summary>
    </member>
    <member name="M:Swifter.RW.DataFilterWriter`1.OnWriteAll(Swifter.RW.IDataReader{`0})">
      <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="P:Swifter.RW.DataFilterWriter`1.Item(`0)">
      <summary>
            获取指定键对应的值写入器。
            </summary>
      <param name="key">指定键</param>
      <returns>返回值写入器</returns>
    </member>
    <member name="P:Swifter.RW.DataFilterWriter`1.Keys">
      <summary>
            获取原始数据写入器的键集合。
            </summary>
    </member>
    <member name="P:Swifter.RW.DataFilterWriter`1.Count">
      <summary>
            获取原始数据写入器的键的数量。
            </summary>
    </member>
    <member name="T:Swifter.RW.InterfaceExtensions">
      <summary>
            提供 ValueInterface 的扩展方法。
            </summary>
    </member>
    <member name="M:Swifter.RW.InterfaceExtensions.SetValueInterface``1(Swifter.RW.ITargetedBind,Swifter.RW.IValueInterface{``0})">
      <summary>
            设置支持针对性接口的对象指定类型的值读写接口。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="targeted">支持针对性接口的对象</param>
      <param name="valueInterface">值读写接口</param>
    </member>
    <member name="M:Swifter.RW.InterfaceExtensions.SetDateTimeFormat(Swifter.RW.ITargetedBind,System.String)">
      <summary>
            设置支持针对性接口的对象的 DateTime 格式。
            </summary>
      <param name="targeted">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="M:Swifter.RW.InterfaceExtensions.SetDateTimeOffsetFormat(Swifter.RW.ITargetedBind,System.String)">
      <summary>
            设置支持针对性接口的对象的 DateTimeOffset 格式。
            </summary>
      <param name="targeted">
      </param>
      <param name="format">
      </param>
    </member>
    <member name="T:Swifter.RW.RWHelper">
      <summary>
            读写器帮助类。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWHelper.DefaultValueReader">
      <summary>
            获取一个所有方法均为获取 default 值的值读取器。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWHelper.DefaultValueRW">
      <summary>
            获取一个所有方法均为获取 default 值或空实现的值读写器。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateReader``1(``0,System.Boolean)">
      <summary>
            为实例创建读取器。
            </summary>
      <typeparam name="T">实例类型</typeparam>
      <param name="throwException">是否抛出异常</param>
      <param name="obj">实例</param>
      <returns>返回一个读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateRW``1(``0,System.Boolean)">
      <summary>
            为实例创建读写器。
            </summary>
      <typeparam name="T">实例类型</typeparam>
      <param name="throwException">是否抛出异常</param>
      <param name="obj">实例</param>
      <returns>返回一个读写器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateWriter``1(System.Boolean)">
      <summary>
            为类型创建一个写入器。
            </summary>
      <typeparam name="T">类型</typeparam>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateWriter``1(``0,System.Boolean)">
      <summary>
            为一个实例创建数据写入器。
            </summary>
      <typeparam name="T">实例类型</typeparam>
      <param name="throwException">是否抛出异常</param>
      <param name="obj">实例</param>
      <returns>返回一个写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateReader(System.Object,System.Boolean)">
      <summary>
            为实例创建一个读取器。
            </summary>
      <param name="obj">实例</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateRW(System.Object,System.Boolean)">
      <summary>
            为实例创建一个读写器。
            </summary>
      <param name="obj">实例</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个读写器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateWriter(System.Type,System.Boolean)">
      <summary>
            为类型创建一个写入器。
            </summary>
      <param name="type">类型</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateWriter(System.Object,System.Boolean)">
      <summary>
            为一个实例创建数据写入器。
            </summary>
      <param name="obj">实例</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateItemReader``1(Swifter.RW.IDataReader{``0},``0,System.Boolean)">
      <summary>
            为读取器中的字段创建数据读取器。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
      <param name="dataReader">数据读取器</param>
      <param name="key">字段的键</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateItemRW``1(Swifter.RW.IDataReader{``0},``0,System.Boolean)">
      <summary>
            为读取器中的字段创建数据读写器。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
      <param name="dataReader">数据读取器</param>
      <param name="key">字段的键</param>
      <param name="throwException">是否抛出异常</param>
      <returns>返回一个读写器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader{``0},Swifter.RW.IDataWriter{``0})">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader{``0},Swifter.RW.IDataWriter)">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader,Swifter.RW.IDataWriter{``0})">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader{``0},Swifter.RW.IDataWriter{``0},Swifter.RW.IValueFilter{``0})">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
      <param name="valueFilter">筛选器</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader{``0},Swifter.RW.IDataWriter,Swifter.RW.IValueFilter{``0})">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
      <param name="valueFilter">筛选器</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy``1(Swifter.RW.IDataReader,Swifter.RW.IDataWriter{``0},Swifter.RW.IValueFilter{``0})">
      <summary>
            Copy 数据内容。
            </summary>
      <typeparam name="T">键类型</typeparam>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
      <param name="valueFilter">筛选器</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.Copy(Swifter.RW.IDataReader,Swifter.RW.IDataWriter)">
      <summary>
            Copy 数据内容。
            </summary>
      <param name="dataReader">数据源</param>
      <param name="dataWriter">目标</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.GetContent``1(System.Object)">
      <summary>
            获取数据读取或写入器的数据源。
            </summary>
      <typeparam name="T">数据源类型</typeparam>
      <param name="dataRW">数据读取器</param>
      <returns>返回该数据源</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.SetContent``1(System.Object,``0)">
      <summary>
            设置数据读取或写入器的数据源。
            </summary>
      <typeparam name="T">数据源类型</typeparam>
      <param name="dataRW">数据读取或写入器</param>
      <param name="content">数据源</param>
    </member>
    <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataReader)">
      <summary>
            将数据读取器转换为具有键的类型的具体数据读取器。
            </summary>
      <param name="dataReader">数据读取器</param>
      <typeparam name="T">键的类型</typeparam>
      <returns>返回具体数据读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataWriter)">
      <summary>
            将数据写入器转换为具有键的类型的具体数据写入器。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <typeparam name="T">键的类型</typeparam>
      <returns>返回具体数据写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.As``1(Swifter.RW.IDataRW)">
      <summary>
            将数据写入器转换为具有键的类型的具体数据写入器。
            </summary>
      <param name="dataRW">数据写入器</param>
      <typeparam name="T">键的类型</typeparam>
      <returns>返回具体数据写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.GetId64Ex(Swifter.RW.IId64DataRW{System.Char},System.String)">
      <summary>
            计算 Id64 值。
            </summary>
      <param name="dataRW">数据读写器</param>
      <param name="name">键</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysReader``2(Swifter.RW.IDataReader{``0},System.Collections.Generic.Dictionary{``0,``1})">
      <summary>
            创建授权代理的数据读取器。
            </summary>
      <typeparam name="TKey">字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataReader">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysWriter``2(Swifter.RW.IDataWriter{``0},System.Collections.Generic.Dictionary{``0,``1})">
      <summary>
            创建授权代理的数据写入器。
            </summary>
      <typeparam name="TKey">字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataWriter">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysReader``3(Swifter.RW.IDataReader{``0},System.Collections.Generic.Dictionary{``1,``2})">
      <summary>
            创建授权代理的数据读取器。
            </summary>
      <typeparam name="TInput">原始数据的字段类型</typeparam>
      <typeparam name="TOutput">授权的字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataReader">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysWriter``3(Swifter.RW.IDataWriter{``0},System.Collections.Generic.Dictionary{``1,``2})">
      <summary>
            创建授权代理的数据写入器。
            </summary>
      <typeparam name="TInput">原始数据的字段类型</typeparam>
      <typeparam name="TOutput">授权的字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataWriter">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysReader``2(Swifter.RW.IDataReader,System.Collections.Generic.Dictionary{``0,``1})">
      <summary>
            创建授权代理的数据读取器。
            </summary>
      <typeparam name="TOutput">授权的字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataReader">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据读取器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.CreateAuthorizedKeysWriter``2(Swifter.RW.IDataWriter,System.Collections.Generic.Dictionary{``0,``1})">
      <summary>
            创建授权代理的数据写入器。
            </summary>
      <typeparam name="TOutput">授权的字段类型</typeparam>
      <typeparam name="TValue">字典的 Value 类型，此功能无需用到该值</typeparam>
      <param name="dataWriter">原始数据</param>
      <param name="authorizedKeys">一个标识允许访问的字段列表</param>
      <returns>返回一个已代理的数据写入器</returns>
    </member>
    <member name="M:Swifter.RW.RWHelper.IsArray``1">
      <summary>
            获取一个 键类型 是否可作为数组索引。
            </summary>
      <typeparam name="TKey">键类型</typeparam>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="T:Swifter.RW.IDataReader`1">
      <summary>
            提供数据的读取方法。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IDataReader`1.OnReadValue(`0,Swifter.RW.IValueWriter)">
      <summary>
            将指定键对应的值写入到值写入器中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.IDataReader`1.OnReadAll(Swifter.RW.IDataWriter{`0})">
      <summary>
            将数据中的所有键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.IDataReader`1.OnReadAll(Swifter.RW.IDataWriter{`0},Swifter.RW.IValueFilter{`0})">
      <summary>
            将数据中的所有键与值进行筛选，并将满足筛选的键与值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">键值筛选器</param>
    </member>
    <member name="P:Swifter.RW.IDataReader`1.Item(`0)">
      <summary>
            获取指定键的值读取器实例。
            </summary>
      <param name="key">指定键</param>
      <returns>返回值读取器实例</returns>
    </member>
    <member name="P:Swifter.RW.IDataReader`1.Keys">
      <summary>
            获取该数据所有的键。
            </summary>
    </member>
    <member name="T:Swifter.RW.IDataReader">
      <summary>
            表示一个数据读取器。
            </summary>
    </member>
    <member name="P:Swifter.RW.IDataReader.Count">
      <summary>
            获取数据源键的数量。
            </summary>
    </member>
    <member name="P:Swifter.RW.IDataReader.ReferenceToken">
      <summary>
            获取数据源的引用根。
            要求每个对象唯一。
            无引用关系的对象可以为 Null。
            </summary>
    </member>
    <member name="T:Swifter.RW.IDataRW`1">
      <summary>
            数据读写器
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="P:Swifter.RW.IDataRW`1.Item(`0)">
      <summary>
            获取指定键的值读写器实例。
            </summary>
      <param name="key">指定键</param>
      <returns>返回值读写器实例</returns>
    </member>
    <member name="P:Swifter.RW.IDataRW`1.Keys">
      <summary>
            获取该数据所有的键。
            </summary>
    </member>
    <member name="T:Swifter.RW.IDataRW">
      <summary>
            表示数据读写器
            </summary>
    </member>
    <member name="P:Swifter.RW.IDataRW.Count">
      <summary>
            获取读写器的键的数量。
            </summary>
    </member>
    <member name="T:Swifter.RW.IDataWriter`1">
      <summary>
            提供数据的写入方法。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IDataWriter`1.OnWriteValue(`0,Swifter.RW.IValueReader)">
      <summary>
            从值读取器中读取一个值设置到指定键的值中。
            </summary>
      <param name="key">指定键</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="M:Swifter.RW.IDataWriter`1.OnWriteAll(Swifter.RW.IDataReader{`0})">
      <summary>
            从数据读取器中读取所有数据源字段到数据源的值。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="P:Swifter.RW.IDataWriter`1.Item(`0)">
      <summary>
            获取指定键的值写入器实例。
            </summary>
      <param name="key">指定键</param>
      <returns>返回值写入器实例</returns>
    </member>
    <member name="P:Swifter.RW.IDataWriter`1.Keys">
      <summary>
            获取该数据所有的键。
            </summary>
    </member>
    <member name="T:Swifter.RW.IDataWriter">
      <summary>
            表示一个数据写入器。
            </summary>
    </member>
    <member name="M:Swifter.RW.IDataWriter.Initialize">
      <summary>
            初始化数据源。
            </summary>
    </member>
    <member name="M:Swifter.RW.IDataWriter.Initialize(System.Int32)">
      <summary>
            初始化具有指定容量的数据源。
            </summary>
      <param name="capacity">指定容量</param>
    </member>
    <member name="P:Swifter.RW.IDataWriter.Count">
      <summary>
            获取数据源键的数量
            </summary>
    </member>
    <member name="T:Swifter.RW.IDirectContent">
      <summary>
            表示支持直接获取或设置数据源的数据读写器
            </summary>
    </member>
    <member name="P:Swifter.RW.IDirectContent.DirectContent">
      <summary>
            直接获取或设置数据源
            </summary>
    </member>
    <member name="T:Swifter.RW.IId64DataRW`1">
      <summary>
            提供以某元素类型集合计算 Id64 值为键的数据读写器。
            仅提供 OnReadValue 和 OnWriteValue 接口。
            并且实现此接口的类型，必须具有类型唯一性。
            即一个读写器类型的 Keys 内容必须始终相同，并且同一个键始终获取的 Id64 值都相同。
            </summary>
      <typeparam name="TSymbol">集合元素的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IId64DataRW`1.GetId64(`0@,System.Int32)">
      <summary>
            计算 Id64 值。
            </summary>
      <param name="firstSymbol">第一个 TSymbol 的引用</param>
      <param name="length">TSymbol 集合的长度</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="M:Swifter.RW.IId64DataRW`1.GetId64(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            计算 Id64 值。
            </summary>
      <param name="symbols">TSymbol 集合</param>
      <returns>返回 Id64 值</returns>
    </member>
    <member name="T:Swifter.RW.IId64DataRW">
      <summary>
            提供以某元素类型集合计算 Id64 值为键的数据读写器。
            仅提供 OnReadValue 和 OnWriteValue 接口。
            并且实现此接口的类型，必须具有类型唯一性。
            即一个读写器类型的 Keys 内容必须始终相同，并且同一个键始终获取的 Id64 值都相同。
            </summary>
    </member>
    <member name="M:Swifter.RW.IId64DataRW.OnReadValue(System.Int64,Swifter.RW.IValueWriter)">
      <summary>
            以 Id64 值为键，从数据读写器中读取一个值到值写入器中。
            </summary>
      <param name="id64">Id64 值</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.IId64DataRW.OnWriteValue(System.Int64,Swifter.RW.IValueReader)">
      <summary>
            以 Id64 值为键，从值读取器中读取该类型的值写入到数据读写器中的指定字段中。
            </summary>
      <param name="id64">Id64 值</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="T:Swifter.RW.IInitialize`1">
      <summary>
            表示允许指定类型的数据源初始化的数据读写器
            </summary>
      <typeparam name="T">指定类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IInitialize`1.Initialize(`0)">
      <summary>
            初始化数据读写器
            </summary>
      <param name="obj">数据源</param>
    </member>
    <member name="P:Swifter.RW.IInitialize`1.Content">
      <summary>
            获取数据源
            </summary>
    </member>
    <member name="T:Swifter.RW.IObjectField">
      <summary>
            对象读写器的字段信息。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.Name">
      <summary>
            字段名称。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.BeforeType">
      <summary>
            字段的初始类型。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.AfterType">
      <summary>
            字段在经过处理之后的类型。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.CanRead">
      <summary>
            能否读取。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.CanWrite">
      <summary>
            能否写入。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.IsPublic">
      <summary>
            是否公开的字段。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.IsStatic">
      <summary>
            是否时静态字段。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.Order">
      <summary>
            字段排序值。
            </summary>
    </member>
    <member name="P:Swifter.RW.IObjectField.Original">
      <summary>
            字段原始信息。
            </summary>
    </member>
    <member name="T:Swifter.RW.ITargetedBind">
      <summary>
            表示支持针对性接口的对象。
            </summary>
    </member>
    <member name="M:Swifter.RW.ITargetedBind.MakeTargetedId">
      <summary>
            分配针对目标的 Id。
            </summary>
    </member>
    <member name="P:Swifter.RW.ITargetedBind.TargetedId">
      <summary>
            获取针对目标的 Id。
            </summary>
    </member>
    <member name="T:Swifter.RW.IUsePool">
      <summary>
            表示读写器在涉及缓存部分使用缓存池。
            </summary>
    </member>
    <member name="T:Swifter.RW.IValueFilter`1">
      <summary>
            数据读取器的值筛选接口。
            </summary>
      <typeparam name="TKey">键类型。</typeparam>
    </member>
    <member name="M:Swifter.RW.IValueFilter`1.Filter(Swifter.RW.ValueFilterInfo{`0})">
      <summary>
            值筛选方法。
            </summary>
      <param name="valueInfo">值信息。</param>
      <returns>返回读取或不读取该值。</returns>
    </member>
    <member name="T:Swifter.RW.ValueFilterInfo`1">
      <summary>
            值筛选时的值信息。
            </summary>
      <typeparam name="TKey">键类型</typeparam>
    </member>
    <member name="F:Swifter.RW.ValueFilterInfo`1.Key">
      <summary>
            读取或设置字段名。
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueFilterInfo`1.Type">
      <summary>
            读取值的定义类型。
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueFilterInfo`1.ValueCopyer">
      <summary>
            获取值的读写器。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueFilterInfo`1.#ctor">
      <summary>
            初始化默认实例。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueFilterInfo`1.#ctor(`0,System.Type,Swifter.RW.ValueCopyer)">
      <summary>
            初始化具有指定值的实例。
            </summary>
      <param name="key">键的值</param>
      <param name="type">值的类型</param>
      <param name="valueCopyer">值的读写器</param>
    </member>
    <member name="T:Swifter.RW.IValueInterface`1">
      <summary>
            提供某一类型在 IValueReader 中读取值和在 IValueWriter 写入值的方法。
            </summary>
      <typeparam name="T">类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IValueInterface`1.ReadValue(Swifter.RW.IValueReader)">
      <summary>
            在 IValueReader 中读取该类型的值。
            </summary>
      <param name="valueReader">值读取器</param>
      <returns>返回该类型的值</returns>
    </member>
    <member name="M:Swifter.RW.IValueInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
      <summary>
            在 IValueWriter 中写入该类型的值。
            </summary>
      <param name="valueWriter">值写入器</param>
      <param name="value">该类型的值</param>
    </member>
    <member name="T:Swifter.RW.IValueInterfaceMaper">
      <summary>
            提供类型与 IValueInterface 的匹配器。
            实现它，并使用 ValueInterface.AddMaper 添加它的实例即可自定义类型的读写方法。
            </summary>
    </member>
    <member name="M:Swifter.RW.IValueInterfaceMaper.TryMap``1">
      <summary>
            类型与 IValueInterface 的匹配方法。
            匹配成功则返回实例，不成功则返回 Null。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <returns>返回一个 IValueInterface/<T /> 实例</returns>
    </member>
    <member name="T:Swifter.RW.IValueReader">
      <summary>
            提供基础类型的值的读取器
            </summary>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadInt64">
      <summary>
            读取 Int64 值。
            </summary>
      <returns>返回一个 long 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadDouble">
      <summary>
            读取 Double 值。
            </summary>
      <returns>返回一个 double 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadString">
      <summary>
            读取 String 值。
            </summary>
      <returns>返回一个 string 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadBoolean">
      <summary>
            读取 Boolean 值。
            </summary>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadByte">
      <summary>
            读取 Byte 值。
            </summary>
      <returns>返回一个 byte 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadChar">
      <summary>
            读取 Char 值。
            </summary>
      <returns>返回一个 char 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadDateTime">
      <summary>
            读取 DateTime 值。
            </summary>
      <returns>返回一个 DateTime 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadDecimal">
      <summary>
            读取 Decimal 值。
            </summary>
      <returns>返回一个 decimal 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadInt16">
      <summary>
            读取 Int16 值。
            </summary>
      <returns>返回一个 short 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadInt32">
      <summary>
            读取 Int32 值。
            </summary>
      <returns>返回一个 int 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadSByte">
      <summary>
            读取 SByte 值。
            </summary>
      <returns>返回一个 sbyte 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadSingle">
      <summary>
            读取 Single 值。
            </summary>
      <returns>返回一个 float 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadUInt16">
      <summary>
            读取 UInt16 值。
            </summary>
      <returns>返回一个 ushort 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadUInt32">
      <summary>
            读取 UInt32 值。
            </summary>
      <returns>返回一个 uint 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadUInt64">
      <summary>
            读取 UInt64 值。
            </summary>
      <returns>返回一个 ulong 值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象数据结构。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组数据结构。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.IValueReader.DirectRead">
      <summary>
            直接读取一个值。
            </summary>
      <returns>返回一个未知类型的值。</returns>
    </member>
    <member name="M:Swifter.RW.IValueReader.ReadNullable``1">
      <summary>
            读取一个可空类型。
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:Swifter.RW.IValueReader`1">
      <summary>
            提供具体类型的值的读取方法。
            </summary>
      <typeparam name="T">具体类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IValueReader`1.ReadValue">
      <summary>
            读取该类型的值。
            </summary>
      <returns>返回该类型的值</returns>
    </member>
    <member name="T:Swifter.RW.IMapValueReader">
      <summary>
            表示一个 Map 读取器。
            </summary>
    </member>
    <member name="M:Swifter.RW.IMapValueReader.ReadMap``1(Swifter.RW.IDataWriter{``0})">
      <summary>
            读取一个 Map 到写入器中。
            </summary>
      <typeparam name="TKey">Map 的键类型</typeparam>
      <param name="mapWriter">Map 写入器</param>
    </member>
    <member name="T:Swifter.RW.IValueRW">
      <summary>
            基础类型的值读写器
            </summary>
    </member>
    <member name="T:Swifter.RW.IValueRW`1">
      <summary>
            自定义类型的值读写器
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:Swifter.RW.IMapValueRW">
      <summary>
            表示一个 Map 读写器。
            </summary>
    </member>
    <member name="T:Swifter.RW.IValueWriter">
      <summary>
            基础类型的值写入器。
            </summary>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteSingle(System.Single)">
      <summary>
            写入一个 Boolean 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteString(System.String)">
      <summary>
            写入一个 String 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构的值
            </summary>
      <param name="dataReader">对象结构读取器</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构的值
            </summary>
      <param name="dataReader">数组结构读取器</param>
    </member>
    <member name="M:Swifter.RW.IValueWriter.DirectWrite(System.Object)">
      <summary>
            直接写入一个对象。
            </summary>
      <param name="value">对象 值</param>
    </member>
    <member name="T:Swifter.RW.IValueWriter`1">
      <summary>
            指定类型的值写入器
            </summary>
      <typeparam name="T">指定类型</typeparam>
    </member>
    <member name="M:Swifter.RW.IValueWriter`1.WriteValue(`0)">
      <summary>
            写入该类型的值
            </summary>
      <param name="value">值</param>
    </member>
    <member name="T:Swifter.RW.IMapValueWriter">
      <summary>
            表示允许写入一个 Map 对象。
            </summary>
    </member>
    <member name="M:Swifter.RW.IMapValueWriter.WriteMap``1(Swifter.RW.IDataReader{``0})">
      <summary>
            写入 Map 对象。
            </summary>
      <typeparam name="TKey">Map 的键类型</typeparam>
      <param name="mapReader">map 读取器</param>
    </member>
    <member name="T:Swifter.RW.RWBoolean">
      <summary>
            表示具有三个值的 Bool 配置项。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWBoolean.None">
      <summary>
            未定义
            </summary>
    </member>
    <member name="F:Swifter.RW.RWBoolean.Yes">
      <summary>
            是
            </summary>
    </member>
    <member name="F:Swifter.RW.RWBoolean.No">
      <summary>
            否
            </summary>
    </member>
    <member name="T:Swifter.RW.RWFieldAccess">
      <summary>
            对象读写器的字段可访问性。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWFieldAccess.RW">
      <summary>
            表示此字段允许读写。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWFieldAccess.Ignore">
      <summary>
            表示忽略此字段。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWFieldAccess.ReadOnly">
      <summary>
            表示此字段只能读。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWFieldAccess.WriteOnly">
      <summary>
            表示此字段只能写。
            </summary>
    </member>
    <member name="T:Swifter.RW.RWFieldAttribute">
      <summary>
            表示对象读取器的一个字段的特性。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWFieldAttribute.DefaultOrder">
      <summary>
            默认排序值。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchInterfaceMethod(System.Type,System.Type,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
      <summary>
            获取与指定类型匹配的值读写接口方法。
            </summary>
      <param name="interfaceType">实现 IValueInterface 接口的类型</param>
      <param name="fieldType">指定类型</param>
      <param name="readValueMethod">值读取接口</param>
      <param name="writeValueMethod">值写入接口</param>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchRWMethod(System.Type,System.Type,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
      <summary>
            获取与指定类型匹配的读写方法。
            </summary>
      <param name="interfaceType">实现读写接口的类型</param>
      <param name="fieldType">指定类型</param>
      <param name="readValueMethod">值读取接口</param>
      <param name="writeValueMethod">值写入接口</param>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.GetBestMatchInterfaceMethod(System.Type,System.Object@,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
      <summary>
            获取与指定类型匹配的值读写接口方法。
            </summary>
      <param name="fieldType">指定类型</param>
      <param name="firstArgument">值读写接口实例</param>
      <param name="readValueMethod">值读取接口</param>
      <param name="writeValueMethod">值写入接口</param>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.GetInterfaceType(System.Type)">
      <summary>
            获取当前 Field 类型的 InterfaceType。
            </summary>
      <param name="fieldType">指定类型</param>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.#ctor">
      <summary>
            初始化对象读取器的一个字段的特性。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWFieldAttribute.#ctor(System.String)">
      <summary>
            初始化具有指定名称的对象读取器的一个字段的特性。
            </summary>
      <param name="name">指定名称</param>
    </member>
    <member name="P:Swifter.RW.RWFieldAttribute.Name">
      <summary>
            此字段的名称。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWFieldAttribute.Order">
      <summary>
            此字段的排序值。约小越靠前，默认值为最靠后。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWFieldAttribute.Access">
      <summary>
            字段的可访问性。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWFieldAttribute.InterfaceType">
      <summary>
            获取或设置字段的值读写接口类型。
            </summary>
    </member>
    <member name="T:Swifter.RW.RWFormatAttribute">
      <summary>
            表示字段格式的读写器特性。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWFormatAttribute.#ctor(System.String)">
      <summary>
            初始化字段格式特性。
            </summary>
      <param name="format">格式化参数</param>
    </member>
    <member name="M:Swifter.RW.RWFormatAttribute.GetBestMatchInterfaceMethod(System.Type,System.Object@,System.Reflection.MethodInfo@,System.Reflection.MethodInfo@)">
      <summary>
            获取最匹配字段类型的值读写器和方法。
            </summary>
      <param name="fieldType">字段类型</param>
      <param name="firstArgument">值读写器实例</param>
      <param name="readValueMethod">值读取方法</param>
      <param name="writeValueMethod">值写入方法</param>
    </member>
    <member name="P:Swifter.RW.RWFormatAttribute.Format">
      <summary>
            格式化参数。
            </summary>
    </member>
    <member name="T:Swifter.RW.RWObjectAttribute">
      <summary>
            对象读写器的特性形式配置项。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWObjectAttribute.OnCreate(System.Type,System.Collections.Generic.List{Swifter.RW.IObjectField}@)">
      <summary>
            在创建对象读写器时的处理方法。
            </summary>
      <param name="type">对象类型</param>
      <param name="fields">对象字段集合</param>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.IgnoreCace">
      <summary>
            是否忽略大小写。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.NotFoundException">
      <summary>
            是否字段为找到时发生异常。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.CannotGetException">
      <summary>
            是否字段不能读取值时发生异常。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.CannotSetException">
      <summary>
            是否字段不能写入值时发生异常。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.IncludeProperties">
      <summary>
            是否包含属性。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.IncludeFields">
      <summary>
            是否包含字段。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.IncludeInherited">
      <summary>
            是否包含继承的成员。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.SkipDefaultValue">
      <summary>
            是否在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
    </member>
    <member name="P:Swifter.RW.RWObjectAttribute.MembersOptIn">
      <summary>
            是否在 OnReadAll 时只读取已定义 RWField(包括继承的类) 特性的成员。
            </summary>
    </member>
    <member name="T:Swifter.RW.RWPathInfo">
      <summary>
            表示对象路径信息。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWPathInfo.Root">
      <summary>
            表示根路径对象。
            </summary>
    </member>
    <member name="F:Swifter.RW.RWPathInfo.Parent">
      <summary>
            父级路径。
            </summary>
    </member>
    <member name="M:Swifter.RW.RWPathInfo.Create``1(``0,Swifter.RW.RWPathInfo)">
      <summary>
            创建一个对象路径信息。
            </summary>
      <typeparam name="TKey">键类型</typeparam>
      <param name="key">键</param>
      <param name="parent">父级路径</param>
      <returns>返回一个新的路径信息</returns>
    </member>
    <member name="M:Swifter.RW.RWPathInfo.GetKey">
      <summary>
            获取键。
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Swifter.RW.RWPathInfo.GetValue(Swifter.RW.IDataReader)">
      <summary>
            获取一个数据读取器该路径的值。
            </summary>
      <param name="dataReader">数据读取器</param>
      <returns>返回一个值</returns>
    </member>
    <member name="M:Swifter.RW.RWPathInfo.SetValue(Swifter.RW.IDataWriter,System.Object)">
      <summary>
            设置一个数据写入器该路径的值。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.RW.RWPathInfo.GetDataReader(Swifter.RW.IDataReader)">
      <summary>
            获取数据读取器的值的数据读取器。
            </summary>
      <param name="dataReader">数据读取器</param>
      <returns>返回数据读取器</returns>
    </member>
    <member name="P:Swifter.RW.RWPathInfo.IsRoot">
      <summary>
            是否为根路径。
            </summary>
    </member>
    <member name="T:Swifter.RW.ReadCopyer`1">
      <summary>
            值读取暂存器。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.#ctor(Swifter.RW.IDataReader{`0},`0)">
      <summary>
            初始化值读取暂存器。
            </summary>
      <param name="dataReader">数据读写器</param>
      <param name="key">键</param>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadBoolean">
      <summary>
            读取一个 Boolean 值。
            </summary>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadByte">
      <summary>
            读取一个 Byte 值。
            </summary>
      <returns>返回一个 byte 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadChar">
      <summary>
            读取一个 Char 值。
            </summary>
      <returns>返回一个 char 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadDateTime">
      <summary>
            读取一个 DateTime 值。
            </summary>
      <returns>返回一个 DateTime 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadDecimal">
      <summary>
            读取一个 Decimal 值。
            </summary>
      <returns>返回一个 decimal 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.DirectRead">
      <summary>
            读取一个未知类型的值。
            </summary>
      <returns>返回一个未知类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadDouble">
      <summary>
            读取一个 Double 值。
            </summary>
      <returns>返回一个 double 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadInt16">
      <summary>
            读取一个 Int16 值。
            </summary>
      <returns>返回一个 short 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadInt32">
      <summary>
            读取一个 Int32 值。
            </summary>
      <returns>返回一个 int 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadInt64">
      <summary>
            读取一个 Int64 值。
            </summary>
      <returns>返回一个 long 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadSByte">
      <summary>
            读取一个 SByte 值。
            </summary>
      <returns>返回一个 sbyte 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadSingle">
      <summary>
            读取一个 Single 值。
            </summary>
      <returns>返回一个 flaot 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadString">
      <summary>
            读取一个 String 值。
            </summary>
      <returns>返回一个 string 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt16">
      <summary>
            读取一个 UInt16 值。
            </summary>
      <returns>返回一个 ushort 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt32">
      <summary>
            读取一个 UInt32 值。
            </summary>
      <returns>返回一个 uint 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadUInt64">
      <summary>
            读取一个 UInt64 值。
            </summary>
      <returns>返回一个 ulong 值</returns>
    </member>
    <member name="M:Swifter.RW.ReadCopyer`1.ReadNullable``1">
      <summary>
            读取一个可空类型的值。
            </summary>
      <typeparam name="T">值类型</typeparam>
      <returns>返回 Null 或该值类型的值</returns>
    </member>
    <member name="T:Swifter.RW.ValueCopyer`1">
      <summary>
            值暂存器。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.#ctor(Swifter.RW.IDataRW{`0},`0)">
      <summary>
            初始化值暂存器。
            </summary>
      <param name="dataRW">数据读写器</param>
      <param name="key">键</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadBoolean">
      <summary>
            读取一个 Boolean 值。
            </summary>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadByte">
      <summary>
            读取一个 Byte 值。
            </summary>
      <returns>返回一个 byte 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadChar">
      <summary>
            读取一个 Char 值。
            </summary>
      <returns>返回一个 char 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadDateTime">
      <summary>
            读取一个 DateTime 值。
            </summary>
      <returns>返回一个 DateTime 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadDecimal">
      <summary>
            读取一个 Decimal 值。
            </summary>
      <returns>返回一个 decimal 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.DirectRead">
      <summary>
            读取一个未知类型的值。
            </summary>
      <returns>返回一个未知类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadDouble">
      <summary>
            读取一个 Double 值。
            </summary>
      <returns>返回一个 double 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadInt16">
      <summary>
            读取一个 Int16 值。
            </summary>
      <returns>返回一个 short 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadInt32">
      <summary>
            读取一个 Int32 值。
            </summary>
      <returns>返回一个 int 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadInt64">
      <summary>
            读取一个 Int64 值。
            </summary>
      <returns>返回一个 long 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadSByte">
      <summary>
            读取一个 SByte 值。
            </summary>
      <returns>返回一个 sbyte 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadSingle">
      <summary>
            读取一个 Single 值。
            </summary>
      <returns>返回一个 flaot 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadString">
      <summary>
            读取一个 String 值。
            </summary>
      <returns>返回一个 string 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt16">
      <summary>
            读取一个 UInt16 值。
            </summary>
      <returns>返回一个 ushort 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt32">
      <summary>
            读取一个 UInt32 值。
            </summary>
      <returns>返回一个 uint 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadUInt64">
      <summary>
            读取一个 UInt64 值。
            </summary>
      <returns>返回一个 ulong 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.ReadNullable``1">
      <summary>
            读取一个可空类型的值。
            </summary>
      <typeparam name="T">值类型</typeparam>
      <returns>返回 Null 或该值类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值。
            </summary>
      <param name="value">byte 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值。
            </summary>
      <param name="value">char 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值。
            </summary>
      <param name="value">DateTime 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值。
            </summary>
      <param name="value">decimal 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.DirectWrite(System.Object)">
      <summary>
            写入一个未知类型的值。
            </summary>
      <param name="value">未知类型的值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值。
            </summary>
      <param name="value">double 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值。
            </summary>
      <param name="value">short 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值。
            </summary>
      <param name="value">int 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值。
            </summary>
      <param name="value">long 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值。
            </summary>
      <param name="value">sbyte 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteSingle(System.Single)">
      <summary>
            写入一个 Single 值。
            </summary>
      <param name="value">float 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteString(System.String)">
      <summary>
            写入一个 String 值。
            </summary>
      <param name="value">string 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值。
            </summary>
      <param name="value">ushort 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值。
            </summary>
      <param name="value">uint 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer`1.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值。
            </summary>
      <param name="value">ulong 值</param>
    </member>
    <member name="T:Swifter.RW.ValueCopyer">
      <summary>
            值暂存器。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ValueOf``1(``0)">
      <summary>
            创建一个具有指定初始值的值暂存器。
            </summary>
      <typeparam name="T">初始值类型</typeparam>
      <param name="value">初始值</param>
      <returns>返回一个值暂存器</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.#ctor">
      <summary>
            初始化值暂存器。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadBoolean">
      <summary>
            读取一个 Boolean 值。
            </summary>
      <returns>返回一个 bool 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.IsEmptyValue">
      <summary>
            获取值是否为空。
            </summary>
      <returns>返回一个 bool 值。</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadByte">
      <summary>
            读取一个 Byte 值。
            </summary>
      <returns>返回一个 byte 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadChar">
      <summary>
            读取一个 Char 值。
            </summary>
      <returns>返回一个 char 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadDateTime">
      <summary>
            读取一个 DateTime 值。
            </summary>
      <returns>返回一个 DateTime 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadDecimal">
      <summary>
            读取一个 Decimal 值。
            </summary>
      <returns>返回一个 decimal 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.DirectRead">
      <summary>
            读取一个未知类型的值。
            </summary>
      <returns>返回一个未知类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadDouble">
      <summary>
            读取一个 Double 值。
            </summary>
      <returns>返回一个 double 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadInt16">
      <summary>
            读取一个 Int16 值。
            </summary>
      <returns>返回一个 short 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadInt32">
      <summary>
            读取一个 Int32 值。
            </summary>
      <returns>返回一个 int 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadInt64">
      <summary>
            读取一个 Int64 值。
            </summary>
      <returns>返回一个 long 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象结构数据。
            </summary>
      <param name="valueWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadSByte">
      <summary>
            读取一个 SByte 值。
            </summary>
      <returns>返回一个 sbyte 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadSingle">
      <summary>
            读取一个 Single 值。
            </summary>
      <returns>返回一个 flaot 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadString">
      <summary>
            读取一个 String 值。
            </summary>
      <returns>返回一个 string 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadUInt16">
      <summary>
            读取一个 UInt16 值。
            </summary>
      <returns>返回一个 ushort 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadUInt32">
      <summary>
            读取一个 UInt32 值。
            </summary>
      <returns>返回一个 uint 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadUInt64">
      <summary>
            读取一个 UInt64 值。
            </summary>
      <returns>返回一个 ulong 值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.ReadNullable``1">
      <summary>
            读取一个可空类型的值。
            </summary>
      <typeparam name="T">值类型</typeparam>
      <returns>返回 Null 或该值类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteTo(Swifter.RW.IValueWriter)">
      <summary>
            将值写入到值写入器中。
            </summary>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值。
            </summary>
      <param name="value">byte 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值。
            </summary>
      <param name="value">char 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值。
            </summary>
      <param name="value">DateTime 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值。
            </summary>
      <param name="value">decimal 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.DirectWrite(System.Object)">
      <summary>
            写入一个未知类型的值。
            </summary>
      <param name="value">未知类型的值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值。
            </summary>
      <param name="value">double 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值。
            </summary>
      <param name="value">short 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值。
            </summary>
      <param name="value">int 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值。
            </summary>
      <param name="value">long 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值。
            </summary>
      <param name="value">sbyte 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteSingle(System.Single)">
      <summary>
            写入一个 Single 值。
            </summary>
      <param name="value">float 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteString(System.String)">
      <summary>
            写入一个 String 值。
            </summary>
      <param name="value">string 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值。
            </summary>
      <param name="value">ushort 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值。
            </summary>
      <param name="value">uint 值</param>
    </member>
    <member name="M:Swifter.RW.ValueCopyer.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值。
            </summary>
      <param name="value">ulong 值</param>
    </member>
    <member name="P:Swifter.RW.ValueCopyer.TypeCode">
      <summary>
            获取值的 TypeCode。
            </summary>
    </member>
    <member name="P:Swifter.RW.ValueCopyer.Value">
      <summary>
            获取值暂存器的值。
            </summary>
    </member>
    <member name="T:Swifter.RW.ValueTypeCodes">
      <summary>
            基础类型枚举，此枚举不能按位合并值。
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Boolean">
      <summary>
            Boolean, bool
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.SByte">
      <summary>
            SByte, sbyte
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Int16">
      <summary>
            Int16, short
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Int32">
      <summary>
            Int32, int
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Int64">
      <summary>
            Int64, long
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Byte">
      <summary>
            Byte, byte
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.UInt16">
      <summary>
            UInt16, ushort
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.UInt32">
      <summary>
            UInt32, uint
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.UInt64">
      <summary>
            UInt64, ulong
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Single">
      <summary>
            Single, float
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Double">
      <summary>
            Double, double
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Decimal">
      <summary>
            Decimal, decimal
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Char">
      <summary>
            Char, char
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.DateTime">
      <summary>
            DateTime
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.String">
      <summary>
            String, string
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Direct">
      <summary>
            Direct
            
            表示可以直接读写值的类型。
            通常是可以用字符串表示的值的类型。
            
            Represents a type that can read and write value directly.
            is typically the type of a value that can be represented by a string.
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Array">
      <summary>
            Array
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Object">
      <summary>
            Object
            其他类型
            Other types
            </summary>
    </member>
    <member name="F:Swifter.RW.ValueTypeCodes.Null">
      <summary>
            Null, DBNull
            </summary>
    </member>
    <member name="T:Swifter.RW.WriteCopyer`1">
      <summary>
            值写入暂存器。
            </summary>
      <typeparam name="TKey">键的类型</typeparam>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.#ctor(Swifter.RW.IDataWriter{`0},`0)">
      <summary>
            初始化值写入暂存器。
            </summary>
      <param name="dataWriter">数据读写器</param>
      <param name="key">键</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值。
            </summary>
      <param name="value">byte 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值。
            </summary>
      <param name="value">char 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值。
            </summary>
      <param name="value">DateTime 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值。
            </summary>
      <param name="value">decimal 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.DirectWrite(System.Object)">
      <summary>
            写入一个未知类型的值。
            </summary>
      <param name="value">未知类型的值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值。
            </summary>
      <param name="value">double 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值。
            </summary>
      <param name="value">short 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值。
            </summary>
      <param name="value">int 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值。
            </summary>
      <param name="value">long 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构数据。
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值。
            </summary>
      <param name="value">sbyte 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteSingle(System.Single)">
      <summary>
            写入一个 Single 值。
            </summary>
      <param name="value">float 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteString(System.String)">
      <summary>
            写入一个 String 值。
            </summary>
      <param name="value">string 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值。
            </summary>
      <param name="value">ushort 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值。
            </summary>
      <param name="value">uint 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值。
            </summary>
      <param name="value">ulong 值</param>
    </member>
    <member name="M:Swifter.RW.WriteCopyer`1.ToString">
      <summary>
            获取值读写器的名称。
            </summary>
      <returns>返回一个名称</returns>
    </member>
    <member name="T:Swifter.RW.ValueInterface`1">
      <summary>
            ValueInterface&lt;T&gt; 提供在 ValueReader 中读取指定类型的值或在 ValueWriter 中写入指定类型的值。
            此类型提供泛型方法，效率更高。
            <typeparam name="T">值的类型</typeparam></summary>
    </member>
    <member name="F:Swifter.RW.ValueInterface`1.Content">
      <summary>
            此类型的具体读写方法实现。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
      <summary>
            往写入器中写入该类型值的方法。
            </summary>
      <param name="value">T 类型的值</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.ReadValue(Swifter.RW.IValueReader)">
      <summary>
            在读取器中读取该类型值的方法。
            </summary>
      <param name="valueReader">值读取器</param>
      <returns>返回该类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.SetInterface(Swifter.RW.IValueInterface{`0})">
      <summary>
            设置该类型的值读写接口实例。
            </summary>
      <param name="valueInterface">值读写接口实例</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.SetTargetedInterface(Swifter.RW.ITargetedBind,Swifter.RW.IValueInterface{`0})">
      <summary>
            设置针对某一目标值读写器的读写接口实例。
            </summary>
      <param name="targeted">目标</param>
      <param name="valueInterface">读写接口实例</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.GetTargetedInterface(Swifter.RW.ITargetedBind)">
      <summary>
            获取针对某一目标值读写器的读写接口实例。
            </summary>
      <param name="targeted">目标</param>
      <returns>返回读写接口实例</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.Read(Swifter.RW.IValueReader)">
      <summary>
            非泛型读取值方法。
            </summary>
      <param name="valueReader">值读取器。</param>
      <returns>返回一个 T 类型的值。</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface`1.Write(Swifter.RW.IValueWriter,System.Object)">
      <summary>
            非泛型写入值方法。
            </summary>
      <param name="valueWriter">值写入器</param>
      <param name="value">T 类型的值</param>
    </member>
    <member name="P:Swifter.RW.ValueInterface`1.IsNotModified">
      <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
    </member>
    <member name="P:Swifter.RW.ValueInterface`1.IsNotModified_">
      <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
    </member>
    <member name="T:Swifter.RW.ValueInterface">
      <summary>
            ValueInterface 提供在 ValueReader 中读取指定类型的值或在 ValueWriter 中写入指定类型的值。
            此类提供非泛型方法。
            </summary>
    </member>
    <member name="M:Swifter.RW.ValueInterface.SetValueFormat``1(System.String)">
      <summary>
            设置指定类型在 WriteValue 方法中写入为指定格式的字符串。在 ReadValue 方法是依然使用默认方法。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="format">指定指定格式</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface.AddMaper(Swifter.RW.IValueInterfaceMaper)">
      <summary>
            添加一个类型与 ValueInterface 的匹配器。
            此匹配器可以自定义类型的读写方法。
            后加入的匹配器优先级高。
            </summary>
      <param name="maper">类型与 ValueInterface 的匹配器</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface.GetInterface(System.Type)">
      <summary>
            非泛型方式获取指定类型的 ValueInterface ，此方式效率并不高。
            如果是已知类型，请考虑使用泛型方式 ValueInterface&lt;TYPE&gt; 获取。
            如果是未知类型的实例，请考虑使用 ValueInterface.GetInterface(object) 获取。
            </summary>
      <param name="type">指定类型</param>
      <returns>返回一个 ValueInterface 实例。</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface.GetInterface(System.Object)">
      <summary>
            非泛型方式获取实例的类型的 ValueInterface ，此方式效率比 ValueInterface.GetInterface(Type) 高，但比 ValueInterface&lt;T&gt;.Content 低。
            </summary>
      <param name="obj">指定一个实例，此实例不能为 Null。</param>
      <returns>返回一个 ValueInterface 实例。</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface.WriteValue(Swifter.RW.IValueWriter,System.Object)">
      <summary>
            往写入器中写入一个未知类型值的方法。
            </summary>
      <param name="valueWriter">写入器</param>
      <param name="value">一个对象值</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface.ReadValue(Swifter.RW.IValueReader,System.Type)">
      <summary>
            在读取器中读取指定类型值的方法。
            </summary>
      <param name="valueReader">读取器</param>
      <param name="type">指定类型</param>
      <returns>返回一个对象值</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface.ReadValue``1(Swifter.RW.IValueReader)">
      <summary>
            在读取器中读取指定类型值的方法。
            </summary>
      <typeparam name="T">值的类型</typeparam>
      <param name="valueReader">值读取器</param>
      <returns>返回该类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface.WriteValue``1(Swifter.RW.IValueWriter,``0)">
      <summary>
            往写入器中写入指定类型值的方法。
            </summary>
      <typeparam name="T">值的类型</typeparam>
      <param name="valueWriter">值写入器</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface.RemoveTargetedInterface(Swifter.RW.ITargetedBind)">
      <summary>
            移除针对某一目标读写器的读写接口实例。
            </summary>
      <param name="targeted">目标</param>
    </member>
    <member name="M:Swifter.RW.ValueInterface.Read(Swifter.RW.IValueReader)">
      <summary>
            在 IValueReader 中读取该类型的值。
            </summary>
      <param name="valueReader">值读取器</param>
      <returns>返回该类型的值</returns>
    </member>
    <member name="M:Swifter.RW.ValueInterface.Write(Swifter.RW.IValueWriter,System.Object)">
      <summary>
            在 IValueWriter 中写入该类型的值。
            </summary>
      <param name="valueWriter">值写入器</param>
      <param name="value">该类型的值</param>
    </member>
    <member name="P:Swifter.RW.ValueInterface.DefaultObjectInterfaceType">
      <summary>
            获取或设置默认的对象类型读写接口类型。
            如果要设置此类型要满足以下条件
            1: 类型必须是可以实例化并且具有公开的无参构造函数。
            2: 必须继承 IValueInterface/<T /> 接口。
            3: 必须是泛型类型，有且只有一个泛型参数，泛型参数与 IValueInterface/<T /> 的泛型参数对应。
            </summary>
    </member>
    <member name="P:Swifter.RW.ValueInterface.DefaultArrayInterfaceType">
      <summary>
            获取或设置默认的数组类型读写接口类型。
            如果要设置此类型要满足以下条件
            1: 类型必须是可以实例化并且具有公开的无参构造函数。
            2: 必须继承 IValueInterface/<T /> 接口。
            3: 必须是泛型类型，有且只有一个泛型参数，泛型参数与 IValueInterface/<T /> 的泛型参数对应。
            </summary>
    </member>
    <member name="P:Swifter.RW.ValueInterface.NullableInterfaceType">
      <summary>
            获取或设置可空类型的读写接口类型。
            </summary>
    </member>
    <member name="P:Swifter.RW.ValueInterface.IsNotModified_">
      <summary>
            表示是否使用用户自定义的读写方法，如果为 True, FastObjectRW 将不优化基础类型的读写。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XFieldInfo">
      <summary>
            XFieldInfo 字段信息。
            此 XFieldInfo 的提供读写方法比 .Net 自带的 FieldInfo 快很多。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XFieldInfo.Create(System.Reflection.FieldInfo,Swifter.Reflection.XBindingFlags)">
      <summary>
            创建 XFieldInfo 字段信息。
            </summary>
      <param name="fieldInfo">.Net 自带的 FieldInfo 字段信息。</param>
      <param name="flags">绑定标识</param>
      <returns>返回一个 XFieldInfo 字段信息。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldInfo.GetValue(System.Object)">
      <summary>
            获取该实例字段的值。
            </summary>
      <param name="obj">类型的实例</param>
      <returns>返回该字段的值</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.Object,System.Object)">
      <summary>
            设置该实例字段的值。
            </summary>
      <param name="obj">类型的实例</param>
      <param name="value">该字段的值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldInfo.GetValue">
      <summary>
            获取该静态字段的值。
            </summary>
      <returns>返回该字段的值</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldInfo.SetValue(System.Object)">
      <summary>
            设置该静态字段的值。
            </summary>
      <param name="value">返回该字段的值</param>
    </member>
    <member name="P:Swifter.Reflection.XFieldInfo.FieldInfo">
      <summary>
            获取 .Net 自带的 FieldInfo 字段信息。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XFieldInfo.Name">
      <summary>
            获取此字段的名称。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XPropertyInfo">
      <summary>
            XPropertyInfo 属性信息。
            此属性信息提供的读写方法比 .Net 自带的 PropertyInfo 属性信息快很多。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XPropertyInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
      <summary>
            创建 XPropertyInfo 属性信息。
            </summary>
      <param name="propertyInfo">.Net 自带的 PropertyInfo 属性</param>
      <param name="flags">绑定标识</param>
      <returns>返回 XPropertyInfo 属性信息。</returns>
    </member>
    <member name="M:Swifter.Reflection.XPropertyInfo.GetValue(System.Object)">
      <summary>
            获取该实例属性的值。
            </summary>
      <param name="obj">类型的实例</param>
      <returns>返回该属性的值</returns>
    </member>
    <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.Object,System.Object)">
      <summary>
            设置该实例属性的值。
            </summary>
      <param name="obj">类型的实例</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Reflection.XPropertyInfo.GetValue">
      <summary>
            获取该静态属性的值。
            </summary>
      <returns>返回该属性的值</returns>
    </member>
    <member name="M:Swifter.Reflection.XPropertyInfo.SetValue(System.Object)">
      <summary>
            设置该静态属性的值。
            </summary>
      <param name="value">值</param>
    </member>
    <member name="P:Swifter.Reflection.XPropertyInfo.PropertyInfo">
      <summary>
            获取 .Net 自带的 PropertyInfo 属性
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XPropertyInfo.Name">
      <summary>
            获取此属性的名称。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XBindingFlags">
      <summary>
            创建 XTypeInfo 或 XObjectRW 时指示要获取成员的标识。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.None">
      <summary>
            没有任何标识，通常表示使用默认标识。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Field">
      <summary>
            表示要获取类型的字段。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Property">
      <summary>
            表示要获取类型的属性。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Method">
      <summary>
            表示要获取类型的方法。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Indexer">
      <summary>
            表示要获取类型的索引器。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Public">
      <summary>
            表示要获取类型的公开成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.NonPublic">
      <summary>
            表示要获取类型的非公开成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Static">
      <summary>
            表示要获取类型的静态成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Instance">
      <summary>
            表示要获取类型的实例成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWCannotSetException">
      <summary>
            表示当属性或索引器调用 set 方法失败时是否抛出异常。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWCannotGetException">
      <summary>
            表示当属性或索引器调用 get 方法失败时是否抛出异常。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWIgnoreCase">
      <summary>
            表示数据读取器的成员名称匹配是否区分大小写。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWNotFoundException">
      <summary>
            表示数据读取器的成员名称无匹配时是否抛出异常。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWSkipDefaultValue">
      <summary>
            在 OnReadAll 中跳过具有类型默认值的成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWMembersOptIn">
      <summary>
            在 OnReadAll 时只读取已定义 RWField(包括继承的类) 特性的成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.RWAllocate">
      <summary>
            在 Initialize 时，不调用构造方法初始化，而是直接从内存中分配这个对象的实例。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.InheritedMembers">
      <summary>
            表示要包含继承的成员。
            </summary>
    </member>
    <member name="F:Swifter.Reflection.XBindingFlags.Default">
      <summary>
            XTypeInfo 创建时默认的标识。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XFieldValueRW">
      <summary>
            提供 XObjectRW 的字段读写器。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.DirectRead">
      <summary>
            直接读取值。
            </summary>
      <returns>值</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.DirectWrite(System.Object)">
      <summary>
            直接写入值。
            </summary>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadArray(Swifter.RW.IDataWriter{System.Int32})">
      <summary>
            读取一个数组结构。
            </summary>
      <param name="valueWriter">数组结构写入器</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadBoolean">
      <summary>
            读取一个 Boolean 值。
            </summary>
      <returns>返回 bool 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadByte">
      <summary>
            读取一个 Byte 值。
            </summary>
      <returns>返回 byte 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadChar">
      <summary>
            读取一个 Char 值。
            </summary>
      <returns>返回 char 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadDateTime">
      <summary>
            读取一个 DateTime 值。
            </summary>
      <returns>返回 DateTime 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadDecimal">
      <summary>
            读取一个 Decimal 值。
            </summary>
      <returns>返回 decimal 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadDouble">
      <summary>
            读取一个 Double 值。
            </summary>
      <returns>返回 double 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt16">
      <summary>
            读取一个 Int16 值。
            </summary>
      <returns>返回 short 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt32">
      <summary>
            读取一个 Int32 值。
            </summary>
      <returns>返回 int 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadInt64">
      <summary>
            读取一个 Int64 值。
            </summary>
      <returns>返回 long 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadObject(Swifter.RW.IDataWriter{System.String})">
      <summary>
            读取一个对象结构数据。
            </summary>
      <param name="valueWriter">对象结构数据写入器</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadSByte">
      <summary>
            读取一个 SByte 值。
            </summary>
      <returns>返回 sbyte 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadSingle">
      <summary>
            读取一个 Single 值。
            </summary>
      <returns>返回 float 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadString">
      <summary>
            读取一个 String 值。
            </summary>
      <returns>返回 string 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt16">
      <summary>
            读取一个 UInt16 值。
            </summary>
      <returns>返回 ushort 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt32">
      <summary>
            读取一个 UInt32 值。
            </summary>
      <returns>返回 uint 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadUInt64">
      <summary>
            读取一个 UInt64 值。
            </summary>
      <returns>返回 ulong 值。</returns>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteArray(Swifter.RW.IDataReader{System.Int32})">
      <summary>
            写入一个数组结构数据。
            </summary>
      <param name="dataReader">数组结构数据读取器</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteBoolean(System.Boolean)">
      <summary>
            写入一个 Boolean 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteByte(System.Byte)">
      <summary>
            写入一个 Byte 值。
            </summary>
      <param name="value">byte 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteChar(System.Char)">
      <summary>
            写入一个 Char 值。
            </summary>
      <param name="value">char 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteDateTime(System.DateTime)">
      <summary>
            写入一个 DateTime 值。
            </summary>
      <param name="value">DateTime 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteDecimal(System.Decimal)">
      <summary>
            写入一个 Decimal 值。
            </summary>
      <param name="value">decimal 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteDouble(System.Double)">
      <summary>
            写入一个 Double 值。
            </summary>
      <param name="value">double 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt16(System.Int16)">
      <summary>
            写入一个 Int16 值。
            </summary>
      <param name="value">short 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt32(System.Int32)">
      <summary>
            写入一个 Int32 值。
            </summary>
      <param name="value">int 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteInt64(System.Int64)">
      <summary>
            写入一个 Int64 值。
            </summary>
      <param name="value">long 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteObject(Swifter.RW.IDataReader{System.String})">
      <summary>
            写入一个对象结构数据。
            </summary>
      <param name="dataReader">对象结构数据读取器</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteSByte(System.SByte)">
      <summary>
            写入一个 SByte 值。
            </summary>
      <param name="value">sbyte 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteSingle(System.Single)">
      <summary>
            写入一个 Single 值。
            </summary>
      <param name="value">float 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteString(System.String)">
      <summary>
            写入一个 String 值。
            </summary>
      <param name="value">bool 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt16(System.UInt16)">
      <summary>
            写入一个 UInt16 值。
            </summary>
      <param name="value">ushort 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt32(System.UInt32)">
      <summary>
            写入一个 UInt32 值。
            </summary>
      <param name="value">uint 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.WriteUInt64(System.UInt64)">
      <summary>
            写入一个 UInt64 值。
            </summary>
      <param name="value">ulong 值</param>
    </member>
    <member name="M:Swifter.Reflection.XFieldValueRW.ReadNullable``1">
      <summary>
            获取一个可空类型的值。
            </summary>
      <typeparam name="T">值类型</typeparam>
      <returns>获取 Null 或该值类型的值。</returns>
    </member>
    <member name="T:Swifter.Reflection.XIndexerInfo">
      <summary>
            XIndexerInfo 索引器信息。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XIndexerInfo.Create(System.Reflection.PropertyInfo,Swifter.Reflection.XBindingFlags)">
      <summary>
            创建索引器信息。
            </summary>
      <param name="propertyInfo">.Net 自带的索引器信息</param>
      <param name="flags">绑定标识</param>
      <returns>返回 XIndexerInfo 索引器信息</returns>
    </member>
    <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object,System.Object[])">
      <summary>
            获取该索引器指定参数的值。
            </summary>
      <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
      <param name="parameters">索引器的参数</param>
      <returns>返回该值</returns>
    </member>
    <member name="M:Swifter.Reflection.XIndexerInfo.GetValue(System.Object[])">
      <summary>
            获取静态索引器指定参数的值。
            </summary>
      <param name="parameters">索引器的参数</param>
      <returns>返回该值</returns>
    </member>
    <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object,System.Object[],System.Object)">
      <summary>
            设置该索引器指定参数的值。
            </summary>
      <param name="obj">类型的实例。如果该索引器是静态的，则指定为 Null</param>
      <param name="parameters">索引器的参数</param>
      <param name="value">值</param>
    </member>
    <member name="M:Swifter.Reflection.XIndexerInfo.SetValue(System.Object[],System.Object)">
      <summary>
            设置静态索引器指定参数的值。
            </summary>
      <param name="parameters">索引器的参数</param>
      <param name="value">值</param>
    </member>
    <member name="P:Swifter.Reflection.XIndexerInfo.PropertyInfo">
      <summary>
            获取 .Net 自带的索引器信息。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XIndexerInfo.GetValueDelegate">
      <summary>
            获取该索引器的 get 方法的委托。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XIndexerInfo.SetValueDelegate">
      <summary>
            获取该索引器的 set 方法的委托。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XMemberCollection`1">
      <summary>
            成员集合。
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Swifter.Reflection.XMemberCollection`1.GetEnumerator">
      <summary>
            获取成员集合迭代器。
            </summary>
      <returns>返回成员集合迭代器。</returns>
    </member>
    <member name="M:Swifter.Reflection.XMemberCollection`1.op_Implicit(`0[])~Swifter.Reflection.XMemberCollection{`0}">
      <summary>
            隐式构建成员集合。
            </summary>
      <param name="array">原始成员集合</param>
    </member>
    <member name="P:Swifter.Reflection.XMemberCollection`1.Count">
      <summary>
            获取成员集合元素数量。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XMemberCollection`1.Item(System.Int32)">
      <summary>
            获取指定索引处的成员。
            </summary>
      <param name="index">指定索引</param>
      <returns>返回成员</returns>
    </member>
    <member name="T:Swifter.Reflection.XMethodInfo">
      <summary>
            XMethodInfo 方法信息。
            此方法提供的动态调用都比 .Net 自带的要快很多。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XMethodInfo.Create(System.Reflection.MethodInfo,Swifter.Reflection.XBindingFlags)">
      <summary>T
            创建 XMethodInfo 方法信息。
            </summary>
      <param name="methodInfo">.Net 自带 MethodInfo 方法信息</param>
      <param name="flags">绑定标识</param>
      <returns>返回一个 XMethodInfo 方法信息。</returns>
    </member>
    <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object,System.Object[])">
      <summary>
            动态执行该方法。
            </summary>
      <param name="obj">类型的实例。如果是静态方法，则指定为 Null</param>
      <param name="parameters">方法的参数</param>
      <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XMethodInfo.Invoke(System.Object[])">
      <summary>
            动态执行该静态方法。
            </summary>
      <param name="parameters">方法的参数</param>
      <returns>返回该方法的返回值。如果返回值类型为 Void，则返回 Null</returns>
    </member>
    <member name="P:Swifter.Reflection.XMethodInfo.MethodInfo">
      <summary>
            获取 .Net 自带的 MethodInfo 方法信息。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XMethodInfo.Delegate">
      <summary>
            获取该方法的委托。
            该委托比普通的委托占用更大的内存，但动态执行的效率更高。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XObjectInterface`1">
      <summary>
            提供 XObjectRW 的读写接口。
            Swifter 默认的对象读写器是 FastObjectRW.
            FastObjectRW 对比 XObjectRW：
                FastObjectRW 的优势是：效率几乎完美，内存占用也不是很大。
                XObjectRW 的优势是：内存占用非常小，效率也不错，可以调用非共有成员。
            如果要改为使用 XObjectRW，在程序初始化代码中添加 Swifter.RW.ValueInterface.DefaultObjectInterfaceType = typeof(Swifter.Reflection.XObjectInterface&lt;T&gt;);
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:Swifter.Reflection.XObjectInterface`1.CheckDerivedInstance">
      <summary>
            表示是否需要进行派生类检查。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XObjectInterface`1.ReadValue(Swifter.RW.IValueReader)">
      <summary>
            在值读取器中读取该类型的实例。
            </summary>
      <param name="valueReader">值读取器</param>
      <returns>返回该类型的实例</returns>
    </member>
    <member name="M:Swifter.Reflection.XObjectInterface`1.WriteValue(Swifter.RW.IValueWriter,`0)">
      <summary>
            在数据写入器中写入该类型的实例。
            </summary>
      <param name="valueWriter">值写入器</param>
      <param name="value">该类型的实例</param>
    </member>
    <member name="T:Swifter.Reflection.XObjectRWExtensions">
      <summary>
            提供新反射工具的扩展方法。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XObjectRWExtensions.SetXObjectRWFlags(Swifter.RW.ITargetedBind,Swifter.Reflection.XBindingFlags)">
      <summary>
            设置对象读写器接口为 XObjectInterface，并设置一个支持针对性接口的对象的默认绑定标识。
            </summary>
      <param name="targeted">支持针对性接口的对象</param>
      <param name="flags">默认绑定标识</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRWExtensions.GetXObjectRWFlags(Swifter.RW.ITargetedBind)">
      <summary>
            获取一个支持针对性接口的对象的默认绑定标识。
            </summary>
      <param name="targeted">支持针对性接口的对象</param>
      <returns>返回绑定标识</returns>
    </member>
    <member name="T:Swifter.Reflection.XObjectRW">
      <summary>
            XObjectRW 一个强大，高效，内存小的对象读写器。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.Create(System.Type,Swifter.Reflection.XBindingFlags)">
      <summary>
            创建 XObjectRW 对象读写器。
            </summary>
      <param name="type">类型</param>
      <param name="flags">绑定标识</param>
      <returns>返回 XObjectRW 对象读写器</returns>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.Create``1(Swifter.Reflection.XBindingFlags)">
      <summary>
            读取或设置默认的绑定标识。
            </summary>
      <typeparam name="T">类型</typeparam>
      <param name="flags">绑定标识</param>
      <returns>返回 XObjectRW 对象读写器</returns>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.OnReadValue(System.String,Swifter.RW.IValueWriter)">
      <summary>
            将指定成员名称的值写入到值写入器中。
            </summary>
      <param name="key">成员的名称</param>
      <param name="valueWriter">值写入器</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.RW.IDataWriter{System.String})">
      <summary>
            将数据源中的所有成员的名称和值写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.OnReadAll(Swifter.RW.IDataWriter{System.String},Swifter.RW.IValueFilter{System.String})">
      <summary>
            对数据源中的原有成员的名称和值进行筛选，并将满足筛选的结果写入到数据写入器中。
            </summary>
      <param name="dataWriter">数据写入器</param>
      <param name="valueFilter">值筛选器</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.OnWriteValue(System.String,Swifter.RW.IValueReader)">
      <summary>
            将数据读取器中的值设置到指定名称的成员中。
            </summary>
      <param name="key">成员的名称</param>
      <param name="valueReader">值读取器</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.Initialize">
      <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.Initialize(System.Int32)">
      <summary>
            调用默认构造函数初始化数据源对象。
            </summary>
      <param name="capacity">不处理此参数</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.Initialize(System.Object)">
      <summary>
            初始化数据源。
            </summary>
      <param name="obj">数据源。</param>
    </member>
    <member name="M:Swifter.Reflection.XObjectRW.OnWriteAll(Swifter.RW.IDataReader{System.String})">
      <summary>
            从数据读取器中读取所有数据源字段到数据源的值
            </summary>
      <param name="dataReader">数据读取器</param>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.DefaultBindingFlags">
      <summary>
            读取或设置默认的绑定标识。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.Item(System.String)">
      <summary>
            获取指定成员名称的成员值的读写器。
            </summary>
      <param name="key">成员名称</param>
      <returns>返回值的读写器</returns>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.Keys">
      <summary>
            获取该对象读写器的成员名称集合。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.Count">
      <summary>
            获取该对象读写器的成员名称的数量
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.ReferenceToken">
      <summary>
            获取数据源的引用根，全局唯一。如果数据源是值类型或 Null，则返回 Null。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XObjectRW.Content">
      <summary>
            获取数据源。
            </summary>
    </member>
    <member name="T:Swifter.Reflection.XTypeInfo">
      <summary>
            XTypeInfo 类型信息。
            此类型信息主要提供该类型的成员的缓存。
            </summary>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.Create(System.Type,Swifter.Reflection.XBindingFlags)">
      <summary>
            创建 XTypeInfo 类型信息。
            </summary>
      <param name="type">需要创建 XTypeInfo 类型信息的类型</param>
      <param name="flags">绑定参数</param>
      <returns>返回一个 XTypeInfo 类型信息</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.Create``1(Swifter.Reflection.XBindingFlags)">
      <summary>
            创建 XTypeInfo 类型信息。
            </summary>
      <typeparam name="T">需要创建 XTypeInfo 类型信息的类型</typeparam>
      <param name="flags">绑定参数</param>
      <returns>返回一个 XTypeInfo 类型信息</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetField(System.String)">
      <summary>
            获取指定名称的字段。
            </summary>
      <param name="name">指定名称</param>
      <returns>返回字段信息或 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetProperty(System.String)">
      <summary>
            获取指定名称的属性。
            </summary>
      <param name="name">指定名称</param>
      <returns>返回属性信息或 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Type[])">
      <summary>
            获取指定参数类型的索引器。
            </summary>
      <param name="types">指定参数类型</param>
      <returns>返回索引器信息或 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetIndexer(System.Object[])">
      <summary>
            获取指定参数的索引器。
            </summary>
      <param name="parameters">指定参数</param>
      <returns>返回索引器信息或 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Type[])">
      <summary>
            获取指定名称和参数类型的方法信息。
            </summary>
      <param name="name">方法名称</param>
      <param name="types">方法参数类型</param>
      <returns>返回方法信息或 Null</returns>
    </member>
    <member name="M:Swifter.Reflection.XTypeInfo.GetMethod(System.String,System.Object[])">
      <summary>
            获取指定名称和参数的方法信息。
            </summary>
      <param name="name">方法名称</param>
      <param name="parameters">方法参数</param>
      <returns>返回方法信息或 Null</returns>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Type">
      <summary>
            获取表示当前 XTypeInfo 的类型。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Flags">
      <summary>
            获取创建 XTypeInfo 的绑定标识。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Fields">
      <summary>
            获取字段集合。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Properties">
      <summary>
            获取属性集合。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Indexers">
      <summary>
            获取索引器集合。
            </summary>
    </member>
    <member name="P:Swifter.Reflection.XTypeInfo.Methods">
      <summary>
            获取方法集合。
            </summary>
    </member>
    <member name="T:Swifter.Formatters.FormatterHelper">
      <summary>
            提供字符类文档的格式的扩展方法。
            </summary>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeToAsync``1(Swifter.Formatters.ITextFormatter,System.IO.TextReader,``0)">
      <summary>
            异步将文档字符串反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="textFormatter">文档反序列化器</param>
      <param name="textReader">文档字符串读取器</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeToAsync``1(Swifter.Formatters.ITextFormatter,System.IO.Stream,``0)">
      <summary>
            异步将字节码内容反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="textFormatter">字节码反序列化器</param>
      <param name="stream">字节码内容读取器</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,System.String,``0)">
      <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="textFormatter">文档反序列化器</param>
      <param name="text">文档字符串</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,System.IO.TextReader,``0)">
      <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="textFormatter">文档反序列化器</param>
      <param name="textReader">文档字符串读取器</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.ITextFormatter,Swifter.Tools.HGlobalCache{System.Char},``0)">
      <summary>
            将文档字符串反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="textFormatter">文档反序列化器</param>
      <param name="hGCache">文档字符串缓存</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,System.Byte[],``0)">
      <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="binaryFormatter">字节码反序列化器</param>
      <param name="bytes">字节码内容</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,System.IO.Stream,``0)">
      <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="binaryFormatter">字节码反序列化器</param>
      <param name="stream">字节码读取器</param>
      <param name="obj">对象</param>
    </member>
    <member name="M:Swifter.Formatters.FormatterHelper.DeserializeTo``1(Swifter.Formatters.IBinaryFormatter,Swifter.Tools.HGlobalCache{System.Byte},``0)">
      <summary>
            将字节码内容反序列化到指定的对象中。
            </summary>
      <typeparam name="T">对象类型</typeparam>
      <param name="binaryFormatter">字节码序列化器</param>
      <param name="hGCache">字节码缓存</param>
      <param name="obj">对象</param>
    </member>
    <member name="T:Swifter.Formatters.IBinaryFormatter">
      <summary>
            提供字节类数据格式的反序列化和序列化接口。
            </summary>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            异步将字节数据源反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="stream">字节数据源读取流</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeAsync(System.IO.Stream,System.Type)">
      <summary>
            异步将字节数据源反序列化为指定类型的值。
            </summary>
      <param name="stream">字节码数据源读取流</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeToAsync(System.IO.Stream,Swifter.RW.IDataWriter)">
      <summary>
            异步将字节数据源反序列化到指定的数据写入器中。
            </summary>
      <param name="stream">字节码数据源读取流</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.SerializeAsync``1(``0,System.IO.Stream)">
      <summary>
            异步将指定类型的实例序列化为字节数据格式。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="stream">字节数据源写入流</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(System.ArraySegment{System.Byte})">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="bytes">字节数据源</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(System.IO.Stream)">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="stream">字节数据源读取流</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="hGCache">字节数据源缓存</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(System.ArraySegment{System.Byte},System.Type)">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <param name="bytes">文档字符串</param>
      <param name="type">字节数据源</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(System.IO.Stream,System.Type)">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <param name="stream">字节数据源读取流</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Byte},System.Type)">
      <summary>
            将字节数据源反序列化为指定类型的值。
            </summary>
      <param name="hGCache">字节数据源缓存</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(System.ArraySegment{System.Byte},Swifter.RW.IDataWriter)">
      <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
      <param name="bytes">字节数据源</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(System.IO.Stream,Swifter.RW.IDataWriter)">
      <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
      <param name="stream">字节数据源读取器</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Byte},Swifter.RW.IDataWriter)">
      <summary>
            将字节数据源反序列化到指定的数据写入器中。
            </summary>
      <param name="hGCache">字节数据源缓存</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0)">
      <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <returns>返回当前文档字符串</returns>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0,System.IO.Stream)">
      <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="stream">字节数据源写入流</param>
    </member>
    <member name="M:Swifter.Formatters.IBinaryFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Byte})">
      <summary>
            将指定类型的实例序列化为字节码数据格式。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="hGCache">字节码数据缓存</param>
    </member>
    <member name="T:Swifter.Formatters.IFormatterReader">
      <summary>
            表示格式化读取器，继承此接口以得到格式化强大的扩展功能。
            </summary>
    </member>
    <member name="T:Swifter.Formatters.IFormatterWriter">
      <summary>
            表示格式化写入器，继承此接口以得到格式化强大的扩展功能。
            </summary>
    </member>
    <member name="T:Swifter.Formatters.ITextFormatter">
      <summary>
            提供字符类文档的序列化和反序列化接口
            </summary>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeAsync``1(System.IO.TextReader)">
      <summary>
            异步将文档字符串反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="textReader">文档字符串读取器</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeAsync(System.IO.TextReader,System.Type)">
      <summary>
            异步将文档字符串反序列化为指定类型的值。
            </summary>
      <param name="textReader">文档字符串读取器</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeToAsync(System.IO.TextReader,Swifter.RW.IDataWriter)">
      <summary>
            异步将文档字符串反序列化到指定的数据写入器中。
            </summary>
      <param name="textReader">文档字符串读取器</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.SerializeAsync``1(``0,System.IO.TextWriter)">
      <summary>
            异步将指定类型的实例序列化为文档字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="textWriter">文档字符串写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(System.String)">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="text">文档字符串</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(System.IO.TextReader)">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="textReader">文档字符串读取器</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize``1(Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="hGCache">文档字符串缓存</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(System.String,Swifter.RW.IDataWriter)">
      <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
      <param name="text">文档字符串</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(System.IO.TextReader,Swifter.RW.IDataWriter)">
      <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
      <param name="textReader">文档字符串读取器</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.DeserializeTo(Swifter.Tools.HGlobalCache{System.Char},Swifter.RW.IDataWriter)">
      <summary>
            将文档字符串反序列化到指定的数据写入器中。
            </summary>
      <param name="hGCache">文档字符串缓存</param>
      <param name="dataWriter">数据写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(System.String,System.Type)">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <param name="text">文档字符串</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <param name="textReader">文档字符串读取器</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Deserialize(Swifter.Tools.HGlobalCache{System.Char},System.Type)">
      <summary>
            将文档字符串反序列化为指定类型的值。
            </summary>
      <param name="hGCache">文档字符串缓存</param>
      <param name="type">指定类型</param>
      <returns>指定类型的值</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0)">
      <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <returns>返回当前文档字符串</returns>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0,System.IO.TextWriter)">
      <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="textWriter">文档字符串写入器</param>
    </member>
    <member name="M:Swifter.Formatters.ITextFormatter.Serialize``1(``0,Swifter.Tools.HGlobalCache{System.Char})">
      <summary>
            将指定类型的实例序列化为文档字符串。
            </summary>
      <typeparam name="T">指定类型</typeparam>
      <param name="value">指定类型的值</param>
      <param name="hGCache">文档字符串缓存</param>
    </member>
  </members>
</doc>